\newpage
\section{Version Control Systems}

\subsection{Basic Version Control Commands}
\begin{verbatim}
    Assume you have a project:
    myproject.py
    
    To try a modification, but unsure of its success:
    mkdir versions/
    mkdir versions/v1/
    cp myproject.py versions/v1/
    
    After modifications:
    - If the modification is good:
      mkdir versions/v2/
      cp myproject.py versions/v2/
    
    - To revert to the old version:
      cp versions/v1/myproject.py myproject.py
\end{verbatim}

\subsubsection{Use Cases for Version Control}
\begin{itemize}
    \item Experiment with changes (try things).
    \item Determine when and how bugs were introduced.
    \item Coordinate work among multiple collaborators on a project.
\end{itemize}

\subsubsection{Version Control Systems (VCS) / Source Code Management (SCM)}
\begin{itemize}
    \item \textbf{Revision Control System (RCS), 1982}: Early system, operated on single files.
    \item \textbf{Concurrent Versions System (CVS), 1986}: Introduced the concept of repositories.
    \item \textbf{Apache Subversion ("SVN"), 2000}: Centralized VCS, allowed versioning of directories.
    \item \textbf{Mercurial ("Hg"), 2005} and \textbf{Git, 2005}:
    \begin{itemize}
        \item Distributed VCS, enabling workflows with local repositories.
        \item Git has spawned a large hosting industry (e.g., GitHub, GitLab).
        \item Both are used internally at major tech companies.
    \end{itemize}
    \item \textbf{Piper}: Google's internal monorepo VCS, not publicly available.
\end{itemize}


\subsubsection{Git fundamentals}
A \textbf{repository} stores the complete history of a project.
\begin{itemize}
    \item It is typically contained in the \texttt{.git/} directory at the root of the project.
\end{itemize}

\paragraph{Commit}
A \textbf{commit} is a unit of change capturing:
\begin{itemize}
    \item A snapshot of all the project files.
    \item Metadata such as author, date, and the \textbf{parent commit}.
\end{itemize}
Commits are uniquely identified by a \textbf{hash}.

\subsubsection{Hashes}
\begin{itemize}
    \item A \textbf{hash} function maps any sequence of bits to a fixed-length bit string.
    \item The map is \textit{surjective} but Git assumes it to be \textit{bijective} for practical purposes.
    \item Git uses \textbf{SHA-1} for hashing: 160 bits / 20 bytes / 40 hexadecimal digits.
    \begin{itemize}
        \item Example hash: \texttt{1e6cac37c5c8c5ee99ec104954d09b07e96116ba}
    \end{itemize}
    \item Git is migrating to \textbf{SHA-256}: 256 bits / 32 bytes / 64 hexadecimal digits.
\end{itemize}

\subsubsection{Hashes in Git}
\begin{itemize}
    \item Commits are designated by SHA-1 hashes.
    \item A short hash prefix can be used to refer to commits if it is unambiguous.
\end{itemize}

\subsection{Building a Commit}
\subsubsection{Working Tree}
\begin{itemize}
    \item The \textbf{working tree} consists of files that are currently being worked on.
    \item We never interact with the \texttt{.git/} directory contents directly.
    \item The working tree reflects the current state of files, excluding the \texttt{.git/} directory.
    \item We can use the \texttt{git checkout} command to update the working tree to match a specific commit.
\end{itemize}

\subsubsection{Staging Area}
\begin{itemize}
    \item Before committing, we \textbf{stage} changes, specifying which modifications should be included in the next commit.
    \item The staging area is a snapshot of what our next commit will look like.
\end{itemize}

\subsubsection{Commit}
\begin{itemize}
    \item After staging, we \textbf{commit} the changes to the repository's history.
    \item A commit includes a snapshot of the staged changes and a commit message describing the changes.
\end{itemize}

\paragraph{Staging and Committing Example}
\begin{lstlisting}[language=bash]
# Creating or modifying files
new_file_A.py
new_file_B.py
new_file_C.py

# Staging files
git add new_file_A.py new_file_B.py

# Committing to the repository
git commit -m "My first commit."
\end{lstlisting}

\subsection*{Listing Past Commits}
\begin{lstlisting}[language=bash]
git log
\end{lstlisting}
\begin{verbatim}
commit 6ea8433f89c78588190435c877b1d3e7c708 (HEAD -> main)
Author: Laurent Perriraz <lperriraz@dev>
Date:   Fri Sep 29 02:44:18 2023 +0200

    My first commit.
\end{verbatim}

\subsubsection{Automatic Adding}
Add multiple files at once using a pattern:
\begin{lstlisting}
git add *.py
\end{lstlisting}
    
Add all files in the working tree:
\begin{lstlisting}
git add -A
\end{lstlisting}
    
Exclude files from automatic adding using \texttt{.gitignore}.

\subsubsection{Observing the State}
\begin{lstlisting}
git status
\end{lstlisting}

\subsubsection{Showing Differences}
\begin{lstlisting}
git diff
\end{lstlisting}

\subsubsection{Staging Changes}
\begin{lstlisting}
git add -A
git status
git diff
git diff --staged
\end{lstlisting}

\subsubsection{Committing Changes}
\begin{lstlisting}
git commit -m "My second commit."
git log
\end{lstlisting}

\subsubsection{Checking Out Commits}
\begin{lstlisting}
git checkout <commit-hash>
git log
git log --all
\end{lstlisting}

\subsubsection{Working with Commits}
\begin{itemize}
    \item Modify files in the working tree and stage the changes.
    \item Commit the staged changes with a descriptive message.
    \item Use \texttt{git log} to see the history of commits.
    \item Check out a specific commit to view or revert to that snapshot.
\end{itemize}


\subsection{Branches}

\subsubsection{Commit Structure}
Commits in Git form a linked list structure, with each commit pointing back to its parent.

\subsubsection{Checking Out Commits}
You can switch between commits using:
\begin{lstlisting}
git checkout <commit-hash>
\end{lstlisting}

\subsubsection{Problem with Detached HEAD}
If you check out a commit directly, you enter a 'detached HEAD' state where changes are not on any branch.

\subsubsection{Creating Branches}
To avoid a detached HEAD, create a new branch:
\begin{lstlisting}
git branch <branch-name>
\end{lstlisting}
Branches allow to work on features or bug fixes while keeping the main branch stable.

\subsubsection{Switching Branches}
To switch to a different branch:
\begin{lstlisting}
git checkout <branch-name>
\end{lstlisting}

\subsubsection{Visualizing Branches}
You can visualize the commit history and branches using:
\begin{lstlisting}
git log --all --graph
\end{lstlisting}

\paragraph{Branching Example}
\begin{itemize}
    \item Initial state after two commits:
    \begin{lstlisting}
    commit 31a051 (HEAD -> main)
    commit 6ea843
    \end{lstlisting}

    \item Create a new branch and switch to it:
    \begin{lstlisting}
    git branch my_branch
    git checkout my_branch
    \end{lstlisting}
    
    \item The branch points to the current commit.
\end{itemize}

\subsubsection{Merging}
Merging incorporates changes from one branch into another.
\begin{lstlisting}
git merge <branch-name>
\end{lstlisting}

\subsubsection{Merge Conflicts}
Conflicts occur when the same lines are changed in both branches. They need to be resolved manually.

\subsubsection{Rebasing}
Rebasing is an alternative to merging, replaying commits from one branch onto another.
\begin{lstlisting}
git rebase <base-branch-name>
\end{lstlisting}

\subsubsection{Handling Merge Conflicts}
Resolve conflicts by editing files, then stage and commit the resolution.
\begin{lstlisting}
# Edit files to resolve conflicts
git add <file>
git commit
\end{lstlisting}


\paragraph{Important Points}
\begin{itemize}
    \item Always commit changes before switching branches.
    \item Use merging or rebasing as per the team's workflow conventions.
    \item Resolve conflicts carefully to maintain code integrity.
\end{itemize}

\subsection{Remotes}

\subsubsection{Sharing Commits}
Git is distributed and allows multiple remotes. There's no central server.

\paragraph{Fetching Commits}
To download commits from a remote repository:
\begin{lstlisting}
git fetch <URL>
\end{lstlisting}
The URL must be accessible, either public or with appropriate credentials.

\paragraph{Cloning Repositories}
If the repository was initially cloned:
\begin{lstlisting}
git clone <URL>
\end{lstlisting}
Use `git fetch` without a URL to fetch from the original source.

\paragraph{Format Patch}
To save commits as files for email, use:
\begin{lstlisting}
git format-patch
\end{lstlisting}

\subsubsection{Best Practices}
\begin{itemize}
    \item Regularly push to and pull from remotes to keep local and remote repositories synchronized.
    \item Use `git fetch` to update local references with remote repository.
    \item Use `git pull` to fetch and merge changes from the remote server to your working directory.
    \item Use `git push` to update the remote repository with your local changes.
\end{itemize}
