\newpage
\section{Boolean Logic and Integers}

\subsection{Boolean Logic}

\subsubsection{Boolean values}
\begin{itemize}
\item False \( = 0 \)
\item True \( = 1 \)
\end{itemize}

\subsubsection{Boolean variables:}
\[ x \in \{0, 1\} \]


\subsubsection{Boolean expressions}

% The table for Boolean operators
\begin{tabular}{l l l l l}
\textbf{Boolean operators:}         &               &       &       & \\
\hline
operator    & math      & pseudocode & C code & logic gate \\
negation    & $\neg$    & not        & !      & [TBD]      \\
conjunction & $\land, \times$  & and         & \&\&, \&     & [TBD]      \\
disjunction & $\lor, +$ & or          & ||, |      & [TBD]      \\
\end{tabular}
\vspace{4.5mm}

\newline
\textbf{Example expression:}

\begin{equation*}
(a \text{ and } b) \text{ or } (\text{not } c)
\end{equation*}

\noindent \textbf{Example function:}

\begin{equation*}
f(a, b, c) := (a \text{ and } b) \text{ or } c
\end{equation*}

\subsubsection{Truth Tables}

\begin{itemize}
    \item The truth table for the NOT operator is as follows:

    \begin{center}
    \begin{tabular}{c|c}
    \hline
    $x$ & $\lnot x$ \\
    \hline
    0 & 1 \\
    1 & 0 \\
    \hline
    \end{tabular}
    \end{center}

    \item The truth table for the AND operator is as follows:

    \begin{center}
    \begin{tabular}{cc|c}
    \hline
    $x$ & $y$ & $x \land y$ \\
    \hline
    0 & 0 & 0 \\
    0 & 1 & 0 \\
    1 & 0 & 0 \\
    1 & 1 & 1 \\
    \hline
    \end{tabular}
    \end{center}

    \item The truth table for the OR operator is as follows:

    \begin{center}
    \begin{tabular}{cc|c}
    \hline
    $x$ & $y$ & $x \lor y$ \\
    \hline
    0 & 0 & 0 \\
    0 & 1 & 1 \\
    1 & 0 & 1 \\
    1 & 1 & 1 \\
    \hline
    \end{tabular}
    \end{center}
\end{itemize}


\paragraph{More operators!}
\begin{itemize}
    \item Exclusive OR (XOR), NAND, and NOR are additional binary Boolean operators with their respective truth tables.
    \item Unary Boolean operators include constants (always true, always false), identity, and NOT.
\end{itemize}

\begin{minipage}{0.3\textwidth}
\centering
Truth table for XOR:

\begin{tabular}{cc|c}
$x$ & $y$ & $x \text{ xor } y$ \\
\hline
0 & 0 & 0 \\
0 & 1 & 1 \\
1 & 0 & 1 \\
1 & 1 & 0 \\
\end{tabular}
\end{minipage}
\hfill
% NAND Operator
\begin{minipage}{0.3\textwidth}
\centering
Truth table for NAND:

\begin{tabular}{cc|c}
$x$ & $y$ & $x \text{ nand } y$ \\
\hline
0 & 0 & 1 \\
0 & 1 & 1 \\
1 & 0 & 1 \\
1 & 1 & 0 \\
\end{tabular}
\end{minipage}
\hfill
% NOR Operator
\begin{minipage}{0.3\textwidth}
\centering
Truth table for NOR:

\begin{tabular}{cc|c}
$x$ & $y$ & $x \text{ nor } y$ \\
\hline
0 & 0 & 1 \\
0 & 1 & 0 \\
1 & 0 & 0 \\
1 & 1 & 0 \\
\end{tabular}
\end{minipage}

\vspace{1em}

\textbf{Example of expressions}
\begin{itemize}
    \item $(a \land b) \lor (\lnot c)$
    \item $f(a, b, c) := (a \land b) \lor c$
    \item $w := \lnot a$
    \item $z := a \land (\lnot b)$
    \item $z := (\lnot a) \lor (b \land c)$
\end{itemize}

\paragraph{Questions}
\textbf{Q: How many distinct unary Boolean operators?}\\
\textbf{A:} one? (NOT)\\

Actually, we have 4 deterministic unary operators in total (counting 3 trivial unary operators):\\

\begin{minipage}[t]{0.15\textwidth}
\centering
always false

\begin{tabular}{c|c}
$x$ & $\emptyset$ \\ % The empty set symbol is used here to denote "always false".
\hline
0 & 0 \\
1 & 0 \\
\end{tabular}
\end{minipage}
\hfill
\begin{minipage}[t]{0.25\textwidth}
\centering
always true

\begin{tabular}{c|c}
$x$ & $1$ \\
\hline
0 & 1 \\
1 & 1 \\
\end{tabular}
\end{minipage}
\hfill
\begin{minipage}[t]{0.25\textwidth}
\centering
identity

\begin{tabular}{c|c}
$x$ & $x$ \\
\hline
0 & 0 \\
1 & 1 \\
\end{tabular}
\end{minipage}
\hfill
\begin{minipage}[t]{0.25\textwidth}
\centering
NOT

\begin{tabular}{c|c}
$x$ & $\text{not } x$ \\
\hline
0 & 1 \\
1 & 0 \\
\end{tabular}
\end{minipage}


\vspace{1em}

\subsubsection{Binary Operators}
The number of distinct binary operators corresponds to the number of different truth tables that can be constructed with two Boolean inputs. There are $2^{2^2} = 16$ possible truth tables for binary operators.

\begin{tabular}{c c c}
x & y & op(x, y) \\
\hline
0 & 0 & ? \\
0 & 1 & ? \\
1 & 0 & ? \\
1 & 1 & ? \\
\end{tabular}

\paragraph{Representing binary operators}
Common binary Boolean operators include AND, OR, and NOT. These are sufficient to represent all possible binary operations.\\
NAND and NOR are known as \textit{universal gates} because they can be used to represent any Boolean operation.\\

\textbf{Examples}\\
$x \text{ nand } y = \text{not } (x \text{ and } y)$ \\
$x \text{ xor } y = (x \text{ or } y) \text{ and } (\text{not } (x \text{ and } y))$ 

\paragraph{Proof via truth table}
To prove that two expressions are equivalent, we can show that their truth tables are identical.

\begin{center}
\begin{tabular}{cc|c|c}
$x$ & $y$ & $x \text{ XOR } y$ & $(x \lor y) \land \lnot(x \land y)$ \\
\hline
0 & 0 & 0 & 0 \\
0 & 1 & 1 & 1 \\
1 & 0 & 0 & 0 \\
1 & 1 & 1 & 1 \\
\end{tabular}
\end{center}

The expressions are equivalent because their truth tables match.


\subsubsection{Boolean identities I}

\begin{itemize}
    \item \( x \text{ and } 0 = 0 \)
    \item \( x \text{ or } 1 = 1 \)
    \item \( x \text{ and } 1 = x \)
    \item \( x \text{ or } 0 = x \)
    \item \( x \text{ or } x = x \)
    \item \( x \text{ and } x = x \)
\end{itemize}

\subsubsection{Boolean identities II}

\begin{itemize}
    \item AND is commutative:
    \[ x \text{ and } y = y \text{ and } x \]

    \item AND is associative:
    \[ x \text{ and } (y \text{ and } z) = (x \text{ and } y) \text{ and } z \]

    \item OR is commutative:
    \[ x \text{ or } y = y \text{ or } x \]

    \item OR is associative:
    \[ x \text{ or } (y \text{ or } z) = (x \text{ or } y) \text{ or } z \]
\end{itemize}

\subsubsection{Boolean identities III}

\begin{itemize}
    \item Distributivity (AND over OR):
    \[ x \text{ and } (y \text{ or } z) = (x \text{ and } y) \text{ or } (x \text{ and } z) \]
    
    \item Distributivity (OR over AND):
    \[ x \text{ or } (y \text{ and } z) = (x \text{ or } y) \text{ and } (x \text{ or } z) \]
    
    \item De Morgan's law (1):
    \[ (\text{not } x) \text{ and } (\text{not } y) = \text{not } (x \text{ or } y) \]

    \item De Morgan's law (2):
    \[ (\text{not } x) \text{ or } (\text{not } y) = \text{not } (x \text{ and } y) \]
\end{itemize}


% Note for user: This transcription assumes a LaTeX document with a suitable class already in place that supports sectioning and itemize environments.
% The "\text{}" command is used here to maintain the "and", "or", and "not" as text within the mathematical expressions for clarity, as per the image content.


\subsubsection{Satisfiability problem}
The satisfiability problem, often referred to as SAT, is a problem of determining if there exists an interpretation that satisfies a given Boolean formula. In other words, it is about finding an assignment to variables that makes the entire expression true.


\paragraph{Example Problem}
Given a Boolean expression, our goal is to find a value for each variable such that the expression evaluates to true.

For the expression \(x1 \land ((\neg x2 \lor x3) \land (\neg x3))\), the truth table is:

\begin{center}
\begin{tabular}{ccc|c}
$x1$ & $x2$ & $x3$ & $x1 \land ((\neg x2 \lor x3) \land (\neg x3))$ \\
\hline
0 & 0 & 0 & 0 \\
0 & 0 & 1 & 0 \\
0 & 1 & 0 & 0 \\
0 & 1 & 1 & 0 \\
1 & 0 & 0 & 1 \\
1 & 0 & 1 & 0 \\
1 & 1 & 0 & 0 \\
1 & 1 & 1 & 0 \\
\end{tabular}
\end{center}

A solution to the SAT problem for this expression is \(x1 = 1\), \(x2 = 0\), \(x3 = 0\).

\subsection*{Definitions}
\begin{itemize}
\item \textbf{Variable:} \(x_j\) for some \(j \in J \subseteq \mathbb{N}\).
\item \textbf{Literal:} Either \(x_j\) or \(\neg x_j\) for some \(j \in J\).
\item \textbf{Disjunctive clause:} A disjunction of literals, e.g., \(\bigvee_{j \in J^0} \neg x_j \lor \bigvee_{j \in J^1} x_j\) for some \(J^0, J^1 \subseteq J\).
\item \textbf{Conjunctive clause:} A conjunction of literals, e.g., \(\bigwedge_{j \in J^0} \neg x_j \land \bigwedge_{j \in J^1} x_j\) for some \(J^0, J^1 \subseteq J\).
\end{itemize}

\subsubsection{Conjunctive normal form}

Conjunctive Normal Form is a way of structuring logical expressions as a conjunction (AND) of disjunctive clauses (ORs of literals).

\[
\bigwedge_{i \in I} \left( \bigvee_{j \in J_i^0} \neg x_j \vee \bigvee_{j \in J_i^1} x_j \right)
\]

where \( J_i^0, J_i^1 \subseteq J \) and \( I \subseteq \mathbb{N} \).

\paragraph{Examples of CNF}
\begin{itemize}
\item \((x1 \lor x2) \land (x3 \lor x4) \land (x5 \lor x6)\)
\item \((\neg x2 \lor \neg x4 \lor \neg x6) \land (x1 \lor x5 \lor x6 \lor x7 \lor x9) \land (\neg x1 \lor \neg x2 \lor \neg x3)\)
\end{itemize}

\subsubsection{Disjunctive normal form}

The disjunctive normal form (DNF) is a disjunction of conjunctive clauses:
\[
\bigvee_{i \in I} \left( \bigwedge_{j \in J_i^0} \neg x_j \land \bigwedge_{j \in J_i^1} x_j \right),
\]
where $J_i^0, J_i^1 \subseteq J \subseteq \mathbb{N}, \forall i \in I \subseteq \mathbb{N}$

\paragraph{Examples:}
\begin{itemize}
    \item $(x1 \land x2) \lor (x3 \land x4) \lor (x5 \land x6)$
    \item $(x1 \land (\neg x2)) \lor (x3 \land (\neg x4))$
\end{itemize}

\subsubsection{Theorems}

\begin{itemize}
    \item Every Boolean expression can be put into CNF
    \begin{itemize}
        \item For every Boolean expression with $n$ variables and $k$ literals using operators \{NOT, AND, OR\}, there exists an equivalent CNF with $n + k$ variables $3k$ clauses and $7k$ literals at most.
        \item Satisfiability for a CNF (``SAT'') is hard.
    \end{itemize}
    \item Every Boolean expression can be put in DNF
    \begin{itemize}
        \item For every Boolean expression with $n$ variables and $k$ literals using operators \{NOT, AND, OR\}, there exists an equivalent DNF with $n$ variables and $n \times 2^n$ literals at most.
        \item Satisfiability for a DNF is trivial.
    \end{itemize}
\end{itemize}

\paragraph{Example:}
$(x2 \land (\neg x4) \land (\neg x6)) 
\lor 
(\neg x1 \land x5 \land x6 \land x7 \land x9)
\lor 
((\neg x1) \land (\neg x2) \land (\neg x3))
\lor 
(x4 \land x5 \land x6)$

\begin{enumerate}
    \item Take any clause, e.g. $(x2 \land (\neg x4) \land (\neg x6))$.
    \item Set $x2 = 1, x4 = 0, x6 = 0$.
    \item Done.
\end{enumerate}




% The following LaTeX code is meant to transcribe the text content of the provided image.
% Since LaTeX doesn't handle images within code, [TBD] is used to represent them.

\subsection{Integer Arithmetic}

\begin{itemize}
    \item Computers are made out of Boolean gates
    \item But we want to represent numbers other than 0 and 1
    \item How do we proceed?
\end{itemize}

\begin{itemize}
    \item Consider Booleans as binary digits (\textit{bits})
    \item Group them together to form numbers in base 2
\end{itemize}

\subsubsection{Base-10 numbers}

In base 10 (decimal), we have 10 digits: \{0, 1, 2, 3, 4, 5, 6, 7, 8, 9\}

Using one digit, we can count to 9:

\begin{center}
    0 \quad 1 \quad 2 \quad 3 \quad 4 \quad 5 \quad 6 \quad 7 \quad 8 \quad 9
\end{center}

Then we need more digits:

\begin{center}
    10 \quad 11 \quad 12 \quad 13 \quad 14 \quad 15 \quad 16 \quad 17 \quad 18 \quad 19
    20 \quad 21 \quad 22 \quad 23 \quad \ldots
\end{center}

\subsubsection{Base-2 numbers}

In base 2 (binary), we have 2 digits: \{0, 1\}\\
Using one digit, we can count to 1: \\
0 \quad 1\\

Then we need more digits: \\
10 \quad 11 \quad 100 \quad 101 \quad 110 \quad 111 \quad 1000 \quad 1001 \ldots\\
If we wanted to count from 0 to 15, we may decide to use 4 digits:\\
0000 \quad 0001 \quad 0010 \quad 0011 \quad 0100 \quad 0101 \quad 0110 \quad 0111\\
1000 \quad 1001 \quad 1010 \quad 1011 \quad 1100 \quad 1101 \quad 1110 \quad 1111\\

\paragraph{Example}

1001$_2$ = ?\\
$=$ $1 \times 8$ $+$ 
$0 \times 4$ $+$ 
$0 \times 2$ $+$ 
 $1$ \\
$=$ $1 \times 2^3$  $+$ 
$0 \times 2^2$ $+$ 
$0 \times 2^1$ $+$ 
 $1 \times 2^0$ 

= 9\\

Note:
\begin{itemize}
\item rightmost / least-significant bit is called bit 0
\item leftmost / most-significant bit is called bit $n - 1$
\end{itemize}


\subsubsection{Fixed bit width}
In computer systems, integers have a fixed number of bits, determining their size and the range of values they can represent.

\paragraph{Commonly Used Integer Types and Their Bit Widths}
\begin{tabular}{lll}
\textbf{bits} & \textbf{a.k.a.} & \textbf{C type} \\
\hline
8  & byte & \texttt{uint8\_t} \\
   &      & \texttt{unsigned char} \\
32 &      & \texttt{uint32\_t} \\
   &      & \texttt{unsigned int} (Windows, Linux, BSD, macOS) \\
64 &      & \texttt{uint64\_t} \\
   &      & \texttt{unsigned long} (Linux, BSD, macOS) \\
   &      & \texttt{unsigned long long} (Windows) \\
\end{tabular}


\subsubsection{Integers in hardware and in programming languages}
\begin{itemize}
    \item Most computers support 8, 16, 32, and 64-bit arithmetic natively.
    \item Arithmetic on integers larger than native size can be done in software, which is slower.
    \item In C, integer types are fixed-size, and arbitrary-sized integers require specific libraries.
    \item Python supports integers of arbitrary size, though with a performance penalty for very large numbers.
\end{itemize}

\begin{tabular}{lr}
\textbf{bits} & \textbf{largest integer = $2^{\text{bits}} - 1$} \\
\hline
8  & 255 \\
16 & 65,535 \\
32 & 4,294,967,295 \\
64 & 18,446,744,073,709,551,615 \\
128 & 340,282,366,920,938,463,463,374,607,431,768,211,455 \\
\end{tabular}



\[
\text{1 decimal digit} = \log_{2}{10} \text{ bits} \approx 3.3219 \text{ bits}
\]


\subsubsection{Operations with integers}
Integer operations in binary are analogous to the decimal operations learned in school.

\subsection*{Binary Addition Example}
\begin{verbatim}
  0 1 0 1 0 0 1 1
+ 0 1 1 0 0 0 0 1
-----------------
  1 0 1 1 0 1 0 0
\end{verbatim}

\paragraph{Operation complexity}
\begin{itemize}
    \item Addition and subtraction are straightforward, like their decimal counterparts.
    \item Multiplication is more complex, involving shifting and adding.
    \item Division is the most complex, requiring iterative subtraction and shifting.
\end{itemize}

\subsubsection{Signed integers}
Representing negative numbers in binary requires special encoding:
\subsubsection{Sign-Magnitude Representation}
\begin{itemize}
    \item One bit is reserved for the sign (most significant bit).
    \item Zero has two representations: $+0$ and $-0$.
    \item Arithmetic with sign-magnitude is not straightforward.
\end{itemize}

\subsubsection{One's Complement Representation}
\begin{itemize}
    \item The sign bit is also the most significant bit.
    \item Negative numbers are represented by flipping all bits of the positive value.
    \item Zero still has two representations: $+0$ and $-0$.
    \item Arithmetic is simpler than sign-magnitude but still not straightforward.
\end{itemize}


\subsubsection{Signed integers: two's complement}
It is the approach adopted by most current computers.
\begin{itemize}
    \item In two's complement representation, a negative number \( x \) is represented by \( 2^n - x \) for an \( n \)-bit number.
    \item The most significant bit (MSB) is the sign bit, where \( 1 \) indicates a negative number.
    \item Flipping the sign requires inverting all bits and adding \( 1 \).
    \item This representation gives zero a single unique representation.
    \item Arithmetic operations for addition and subtraction are the same as for unsigned integers.
\end{itemize}





% Start of the LaTeX content
\subsubsection{4-bit signed integers (two's complement)}

\begin{tabular}{cccccc}
b3 & b2 & b1 & b0 & unsigned & signed \\
\hline
0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 1 & 1 & 1 \\
0 & 0 & 1 & 0 & 2 & 2 \\
0 & 0 & 1 & 1 & 3 & 3 \\
0 & 1 & 0 & 0 & 4 & 4 \\
0 & 1 & 0 & 1 & 5 & 5 \\
0 & 1 & 1 & 0 & 6 & 6 \\
0 & 1 & 1 & 1 & 7 & 7 \\
1 & 0 & 0 & 0 & 8 & -8 \\
1 & 0 & 0 & 1 & 9 & -7 \\
1 & 0 & 1 & 0 & 10 & -6 \\
1 & 0 & 1 & 1 & 11 & -5 \\
1 & 1 & 0 & 0 & 12 & -4 \\
1 & 1 & 0 & 1 & 13 & -3 \\
1 & 1 & 1 & 0 & 14 & -2 \\
1 & 1 & 1 & 1 & 15 & -1 \\
\end{tabular}

\subsubsection{Example:}

\begin{tabular}{lcl}
signedness & decimal & binary \\
\hline
unsigned & $2 + 11 = 13$ & $0010_b + 1011_b = 1101_b$ \\
signed & $2 + (-5) = -3$ & $0010_b + 1011_b = 1101_b$ 
\end{tabular}

\subsubsection{Range of values for different bit sizes:}

\begin{tabular}{cccc}
bits & $-2^{bits-1}$ (min) & $2^{bits-1} - 1$ (max) \\
\hline
8  & -128 & 127 \\
16 & -32768 & 32767 \\
32 & -2,147,483,648 & 2,147,483,647 \\
64 & $\approx -9.10^{18}$ & $\approx 9.10^{18}$ \\
128 & $\approx -2.10^{38}$ & $\approx 2.10^{38}$ \\
\end{tabular}