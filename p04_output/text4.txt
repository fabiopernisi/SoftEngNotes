\newpage
\section{Compiler invocation, IDEs, build systems}

\subsection{Compiling}

\subsubsection{Historical compilers}

\begin{itemize}
    \item Proprietary
    \begin{itemize}
        \item Intel C++ Compiler (ICC, 1970's?)
        \item Microsoft Visual C++ (MSVC, 1993)
        \item ARM Compiler (ARMCC, 2005)
        \item AMD Optimizing C/C++ Compiler (AOCC, 2017)
    \end{itemize}
    \item Open source
    \begin{itemize}
        \item GNU Compiler Collection (GCC, 1987)
        \item LLVM (2003--)
    \end{itemize}
\end{itemize}
\subsubsection{Evolution of compilers}
\begin{itemize}
    \item 2014: ARM Compiler rebased on LLVM
    \item 2017: AMD Compiler was always based on LLVM
    \item 2021: Intel C++ Compiler rebased on LLVM
\end{itemize}

\subsubsection{Current major compilers}
\begin{itemize}
    \item Microsoft Visual C++
    \begin{itemize}
        \item default on MS Windows (in MS Visual Studio)
    \end{itemize}
    \item GCC
    \begin{itemize}
        \item default on most open source OSs
    \end{itemize}
    \item LLVM (for C/C++: Clang)
    \begin{itemize}
        \item base for hardware vendor (Intel, ARM, AMD, nVidia) compilers
        \item default on MacOS, iOS (in Apple X Code)
        \item default for native applications on Android
    \end{itemize}
\end{itemize}

\subsubsection{Components of a compiler}
\begin{itemize}
    \item Front-end (parses and analyses code -- language-specific)
    \item Intermediate representation (IR) (most code optimization happens here)
    \item Back-end (writes assembly or machine code -- ISA-specific)
\end{itemize}

\paragraph{LLVM frontends:}
\begin{itemize}
    \item C and C++ (Clang), Fortran (Flang), Rust, Zig, Swift
\end{itemize}

\paragraph{LLVM backends:}
\begin{itemize}
    \item Intel/AMD/ARM compilers, nVidia CUDA compiler, AMD ROCm
\end{itemize}

\subsubsection{LLVM IR}
 gibberish verbatim picture

\subsubsection{Compiler invocation (1)}

\begin{itemize}
  \item As usual, use \texttt{man gcc} / \texttt{man clang} for help.
  \item Compile and link:
    \begin{verbatim}
      gcc -o executable source_code.c
    \end{verbatim}
  \item Compile only:
    \begin{verbatim}
      gcc -c -o file.o file.c
    \end{verbatim}
  \item Link only:
    \begin{verbatim}
      gcc -o executable file.o file1.o file2.o file3.o
    \end{verbatim}
  \item Write assembly (see also: )
    \begin{verbatim}
      gcc -S assembly.s source_code.c
    \end{verbatim}
  \item Internally, \texttt{gcc} runs other tools (assembler: \texttt{as}, linker: \texttt{ld})
\end{itemize}

\subsubsection{Compiler invocation (2)}

\begin{itemize}
  \item Enable warnings:
    \begin{verbatim}
      gcc -Wall -c -o file.o file.c
    \end{verbatim}
  \item Enable optimization:
    \begin{verbatim}
      gcc -Wall -O3 -c -o file.o file.c
    \end{verbatim}
\end{itemize}

\subsubsection{Note for MacOS}
Install \texttt{binutils}:
\begin{itemize}
    \item from MacPorts \url{https://www.macports.org}
    \begin{verbatim}
    port install binutils
    \end{verbatim}
    \item or from Homebrew \url{https://brew.sh/}
    \begin{verbatim}
    brew install binutils
    \end{verbatim}
\end{itemize}
Utilities may be prefixed by a \texttt{g}:
\begin{itemize}
    \item \texttt{objdump} $\rightarrow$ \texttt{gobjdump}
\end{itemize}

\subsubsection{Tools}
\begin{itemize}
    \item \texttt{hexdump} dump hexadecimal representation of any file
    \begin{itemize}
        \item \texttt{hexdump -C} also print ASCII for valid ASCII bytes
        \item \texttt{hexdump -C \textbar less} ``pipe'' output to pager
        \item \texttt{hexdump -C > file.hex} write output to a file
    \end{itemize}
    \item \texttt{readelf} print symbols in ELF object file
    \begin{itemize}
        \item \texttt{readelf -a} print all object information
    \end{itemize}
    \item \texttt{objdump} dump contents of object file
    \begin{itemize}
        \item \texttt{objdump -M intel -d} disassembles object file, prints assembly code
        \item \texttt{objdump -p} similar to \texttt{readelf}
    \end{itemize}
    \item or online: \url{http://godbolt.org}
\end{itemize}

\subsection{Editing Code}

\subsubsection{Applications for writing code}

\begin{itemize}
  \item Text editors, i.e. Notepad
  \item Code editors, i.e. emacs, vim, Notepad++, VS Code
  \item Integrated development environment (IDE), i.e. Microsoft Visual Studio, Apple XCode, IDE: IntelliJ IDEA (paid)
\end{itemize}

\subsubsection{More code editors}

\begin{itemize}
    \item gedit
    \item Kate
    \item Sublime Text (paid)
    \item many more...
\end{itemize}

\subsubsection{More IDEs}
\begin{itemize}
    \item PyCharm (Python, paid)
    \item Android Studio (paid)
    \item KDevelop
    \item QtCreator
    \item Dev-C++
    \item Spyder (Python)
    \item \ldots
\end{itemize}

\subsubsection{Code editor vs. IDE}
\textbf{IDE pros:}
\begin{itemize}
    \item one-click compile
    \item IDE aware of whole project
    \begin{itemize}
        \item can suggest code completions from different files
    \end{itemize}
    \item integrated tools (e.g. debugger)
\end{itemize}

\textbf{IDE cons:}
\begin{itemize}
    \item Project setup takes time and effort
    \item ``Walled garden'' problem
    \begin{itemize}
        \item By default, anyone who wants to compile your project needs the same IDE.
    \end{itemize}
\end{itemize}

\subsection{Build Systems}

\subsubsection{How do we compile a complex project?}

\begin{itemize}
    \item Option 1:
    \begin{verbatim}
        gcc -Wall -O3 -c -o ggml.o ggml.c
        gcc -Wall -O3 -c -o ggml-alloc.o ggml-alloc.c
        g++ -Wall -O3 -c -o llama.o llama.cpp
        g++ -Wall -O3 -c -o common/common.o common/common.c
        g++ -Wall -O3 -c -o console.o console/common/console.c
        g++ -Wall -O3 -c -o grammar-parser.o common/grammar-parser.c
        g++ -Wall -O3 -shared -fPIC -o common.so common/ggml-alloc.o llama.o \
            common.o console.o grammar-parser.o
    \end{verbatim}
    
    \item Option 2:
    \begin{itemize}
        \item Put above commands in a "shell script" file, e.g., \texttt{compile.sh}
        
        \item Run:
        \begin{verbatim}
            ./compile.sh
        \end{verbatim}
        
        \item Problems:
        \begin{itemize}
            \item Difficult to modify (e.g., change compiler options)
            \item We recompile everything everytime
        \end{itemize}
    \end{itemize}
\end{itemize}

\subsubsection{Build automation}

\begin{itemize}
    \item IDE integrated:
    \begin{itemize}
        \item Visual Studio
        \item Xcode
    \end{itemize}
    
    \item Stand-alone:
    \begin{itemize}
        \item make
        \item Bazel (based on Google's internal tool Blaze) / Buck (Facebook)
        \item Ninja (Google, for Chrome)
        \item CMake (uses make, Ninja,...), qmake (uses make), Meson (uses Ninja, ...)
    \end{itemize}
\end{itemize}

\subsubsection{Make}
Example:
\begin{itemize}
    \item The \texttt{Makefile} contains rules for compiling source files and generating the shared library \texttt{libllama.so}.
    \item Compilation is performed using \texttt{gcc} for C files and \texttt{g++} for C++ files, with flags \texttt{-Wall} (enable all warnings), \texttt{-O3} (optimization level 3), and \texttt{-c} (compile without linking).
    \item The \texttt{.o} object files are created from their respective source files.
    \item The \texttt{libllama.so} shared library is created by linking the object files \texttt{gmgml.o}, \texttt{gmgml-alloc.o}, \texttt{llama.o}, \texttt{common.o}, \texttt{console.o}, and \texttt{grammar-parser.o} using \texttt{g++} with flags \texttt{-shared} and \texttt{-fPIC} (Position Independent Code).
    \item Command \texttt{make libllama.so} triggers the compilation and linking process defined in the \texttt{Makefile}, resulting in the creation of \texttt{libllama.so}.
    \item Run
    \begin{verbatim}
    make libllama.so
    \end{verbatim}
\end{itemize}



\subsubsection{Make rule syntax}

\begin{verbatim}
target: source0 source1 source2 ...
       recipe
\end{verbatim}

Whenever one of the sources was modified after the target, run the recipe (to rebuild the target).

Otherwise, consider target up-to-date and do nothing.

\subsubsection{Make variables}


\begin{itemize}
    \item \textbf{Compiler Variables:} The Makefile specifies compilers and the associated flags for compiling C and C++ files. The variables \texttt{CC} and \texttt{CXX} are used for the C and C++ compilers respectively, with \texttt{gcc} for C and \texttt{g++} for C++. The flags \texttt{-Wall} (enables all compiler's warning messages) and \texttt{-O3} (optimization level 3) are set for both compilers using \texttt{CFLAGS} and \texttt{CXXFLAGS}.
    \item \textbf{Object File Rules:} Rules for generating object files from source files are defined. Each rule follows the format \texttt{target: dependencies} followed by the command to create the target. For example, \texttt{gmgml.o} is compiled from \texttt{gmgml.c} and depends on header files \texttt{gmgml.h} and \texttt{gmgml-cuda.h}.
    \item \textbf{Use of Variables:} The \texttt{\$(...)} syntax is used to reference variables. For instance, \texttt{\$(CC)} and \texttt{\$(CFLAGS)} in a rule's command extract the values of the \texttt{CC} and \texttt{CFLAGS} variables respectively. 
    \item \textbf{Shared Library:} The target \texttt{libllama.so} demonstrates creating a shared library from multiple object files. It uses the \texttt{-shared} and \texttt{-fPIC} flags, with \texttt{-fPIC} indicating Position Independent Code, necessary for shared libraries.
\end{itemize}



\subsubsection{Special make variables}
\begin{itemize}
    \item \verb|$(@)| the target of the current rule
    \item \verb|$<)| the first source of the current rule
    \item \verb|$(^)| all the sources of the current rule
\end{itemize}

[big verbatim]

\subsubsection{Static pattern rules}
\begin{itemize}
    \item Static pattern syntax:
    \begin{verbatim}
target0 target1 target2 ... : target-pattern : source-pattern
    recipe
    \end{verbatim}
    
    \item Target pattern contains \%, which will match anything
    \item Source pattern also contains \%, which is replaced by the match in target
    \item Example:
    \begin{verbatim}
some_file.o other_file.o third_file.o : %.o : %.c
    recipe
    \end{verbatim}
    is equivalent to:
    \begin{verbatim}
some_file.o: some_file.c
    recipe
other_file.o: other_file.c
    recipe
third_file.o: third_file.c
    recipe
    \end{verbatim}
\end{itemize}
[two big verbatim]

\subsubsection{Phony and default targets}

A "phony" target does not necessarily correspond to a file name:

\begin{verbatim}
.PHONY: clean

clean:
    rm libllama.so
\end{verbatim}

If no target is provided to the make command, the default target is the first one. A common pattern is:

\begin{verbatim}
.PHONY: default

default: libllama.so
\end{verbatim}

\begin{itemize}
    \item \textbf{.PHONY Target:}
    \begin{itemize}
        \item The `.PHONY` target is a built-in Make feature that helps to define targets that are not associated with files. Targets under `.PHONY` are always considered out of date and Make executes their recipes every time they are invoked, irrespective of any file with the same name as the target.
        \item In the example Makefile, `.PHONY` is used to declare `default` and `clean` as phony targets. This ensures that `make default` will build the `libllama.so` library and `make clean` will execute the cleaning commands even if files named `default` or `clean` exist in the directory.
    \end{itemize}
    
    \item \textbf{Usage of .PHONY in the Example:}
    \begin{itemize}
        \item \texttt{default}: This phony target is usually the first in a Makefile and therefore the default when `make` is executed without arguments. It depends on \texttt{\$(LIBTARGET)}, which causes the build of the `libllama.so` shared library.
        \item \texttt{clean}: This target is responsible for removing all the build artifacts, such as object files and the shared library, thus cleaning the build directory. The command `rm -f \$(COBJS) \$(CXOBJS) \$(LIBTARGET)` is invoked, which forces removal without prompting, even if there are no files to remove (the `-f` option).
    \end{itemize}
\end{itemize}

\subsubsection{Using shell commands}

The syntax is:

\begin{verbatim}
$(shell any-shell-command)
\end{verbatim}

For example:

\begin{verbatim}
TODAY := $(shell date)
CFILES := $(shell ls *.c)
\end{verbatim}




\subsubsection{String replacement in variables}

\begin{itemize}
  \item The syntax is:
  \begin{verbatim}
    $(variable:pattern=replacement)
  \end{verbatim}

  \item The pattern contains \%, which will match any substring
  \item The replacement may contain \%, which will be replaced by the matched substring
  \item For example:
  \begin{verbatim}
    C_FILES := $(shell ls *.c)
    O_FILES := $(C_FILES:%.c=%.o)
  \end{verbatim}
\end{itemize}

\subsubsection{For more about make}

\begin{verbatim}
# Using make
man make

# Writing Makefiles
info make
\end{verbatim}