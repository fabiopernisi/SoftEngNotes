\newpage
\section{Lecture 19}

\subsection{Abstract Data Types and Data Strucutres}

\begin{itemize}
    \item An abstract data type is a data container
    \begin{itemize}
        \item Examples:
        \begin{itemize}
            \item in Python: \texttt{list}, \texttt{dict}, \texttt{set}, \ldots
            \item in C++: \texttt{std::vector}, \texttt{std::unordered\_map}, \ldots
        \end{itemize}
        \item Specifies which operations are (natively) supported
        \item Does not specify how data is stored
        \item Does not specify how the operations are implemented
    \end{itemize}
    \item A data structure is an implementation of an \textit{abstract data type}
    \begin{itemize}
        \item Specifies how data is layed out in memory
        \item Specifies which algorithms are used for operations
        \begin{itemize}
            \item We can compute the computational complexity of those algorithms
        \end{itemize}
    \end{itemize}
\end{itemize}

% It should be noted that the transcription above has been created with the assumption that a LaTeX document preamble is already in place, which would typically include packages like `itemize` for lists and `texttt` for monospaced font to represent code.


% Begin LaTeX document - ensure that the document class and necessary packages are already set up in your LaTeX editor before compiling this content

\subsection{Lists}

\begin{itemize}
    \item Lists are one of the simplest abstract data type
    \item Just a collection of ordered elements
    \item They support
    \begin{itemize}
        \item storing multiple elements together
        \item and \textit{optionally}
        \begin{itemize}
            \item appending an element (at the end of the list)
            \item discarding the last element (at the end of the list)
            \item inserting an element (in any position) in the list
            \item deleting an element (in any position) in the list
            \item accessing or modifying all elements in order
            \item accessing or modifying an element at an arbitrary index (``random access'')
            \item \ldots
        \end{itemize}
    \end{itemize}
\end{itemize}

\subsection{Arrays}

% End of the LaTeX document content


% Static arrays section
\subsubsection{Static arrays}

\begin{itemize}
  \item Static arrays implement lists of a fixed size \( n \)
  \item Elements are stored contiguously, one after another, in memory
  \item They implement
  \begin{itemize}
    \item accessing or modifying an element at an arbitrary index
    \begin{itemize}
      \item \( \text{element\_address} = \text{array\_address} + \text{index} \times \text{element\_size} \)
      \item complexity \( O(1) \)
    \end{itemize}
    \item accessing or modifying all elements in order (direct consequence of random access)
    \begin{itemize}
      \item complexity \( O(n) \)
    \end{itemize}
  \end{itemize}
\end{itemize}

% Dynamic arrays section
\subsubsection{Dynamic arrays}

\begin{itemize}
  \item Dynamic arrays implement lists of a variable size \( n \)
  \item Elements are stored contiguously, one after another, in memory
  \item They implement static array operations, plus
  \begin{itemize}
    \item changing the size \( n \) of the list
    \begin{itemize}
      \item complexity \( O(n) \) in theory
    \end{itemize}
    \item as a consequence, we can
    \begin{itemize}
      \item append an element (at the end of the list) in \( O(n) \)
      \item discard the last element (at the end of the list) in \( O(n) \)
      \item insert an element (in any position) in the list in \( O(n) \)
      \item delete an element (in any position) in the list in \( O(n) \)
      \item \ldots
    \end{itemize}
  \end{itemize}
\end{itemize}

% Size increase section
\subsubsection{Size increase}

\begin{itemize}
  \item An array occupies the bytes in memory:
  \begin{itemize}
    \item from ``array\_address'' % Using double quotes for literal strings
    \item to \( \text{array\_address} + n \times \text{element\_size} - 1 \)
  \end{itemize}
  \item Increasing \( n \) has \( O(n) \) complexity, because the memory at
  \[ \text{array\_address} + n \times \text{element\_size} \]
  may be occupied by other data
  \item In that case, the dynamic array must be relocated elsewhere in memory (changing \( \text{array\_address} \))
  \item All \( n \times \text{element\_size} \) bytes must be copied to the new location, hence \( O(n) \) complexity
\end{itemize}




\subsubsection{Size decrease}

\begin{itemize}
    \item Conversely, if the memory before and/or after an array is free,
    \begin{itemize}
        \item we may want to move the array
        \item in order to create a larger block of free memory
    \end{itemize}
    \item Not doing this may cause ``memory fragmentation''
\end{itemize}

\noindent In theory:

\begin{center}
\begin{tabular}{l c}
\hline
operation & complexity \\
\hline
access/modify element at arbitrary index & $O(1)$ \\
increase $n$ & $O(n)$ \\
decrease $n$ & $O(n)$ \\
append an element & $O(n)$ \\
discard last element & $O(n)$ \\
insert an element & $O(n)$ \\
delete an element & $O(n)$ \\
\hline
\end{tabular}
\end{center}

\noindent In practice:

\begin{itemize}
    \item Almost all implementations ignore fragmentation due to shrinking \\
    (no move when decreasing $n > 0$)
\end{itemize}

\begin{center}
\begin{tabular}{l c}
\hline
operation & complexity \\
\hline
access/modify element at arbitrary index & $O(1)$ \\
increase $n$ & $O(n)$ \\
decrease $n$ & $O(1)$ \\
append an element & $O(n)$ \\
discard last element & $O(1)$ \\
insert an element & $O(n)$ \\
delete an element & $O(n)$ \\
\hline
\end{tabular}
\end{center}

\subsubsection{Over-allocation}

\begin{itemize}
  \item We have two distinct quantities:
  \begin{itemize}
    \item the user-visible size $n$
    \item the allocated size $a$
  \end{itemize}

  \item If the user requests a size increase $n' > n$
  \begin{itemize}
    \item as long as $n' \leq a$, nothing needs to happen
  \end{itemize}

  \item $a$ is never incremented (no $a' = a + 1$)

  \item instead, at small sizes, we increase $a$ exponentially ($a' = 2a$)
\end{itemize}

\subsubsection{Exponential allocation (n = 3)}

\begin{itemize}
  \item [TBD] % Placeholder for the visual representation of the memory blocks
  \item (used) $3 = n$
  \item $4 = a$
\end{itemize}

\subsubsection{Exponential allocation (n = 4)}

\begin{itemize}
  \item [TBD] % Placeholder for the visual representation of the memory blocks
  \item $4 = n$
  \item $4 = a$
\end{itemize}

% End of the LaTeX code for lecture material transcription


% Slide 1: Exponential allocation (n = 5)
\subsubsection{Exponential allocation (n = 5)} \\
\begin{tabular}{cccccccc}
$\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & x & x & x \\
\end{tabular} \\
(used) \\
5 = n \\
8 = a \\

% Slide 2: Exponential allocation (n = 6)
\subsubsection{Exponential allocation (n = 6)} \\
\begin{tabular}{cccccccc}
$\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & x & x \\
\end{tabular} \\
(used) \\
6 = n \\
8 = a \\

% Slide 3: Exponential allocation (n = 7)
\subsubsection{Exponential allocation (n = 7)} \\
\begin{tabular}{cccccccc}
$\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & $\cdot$ & x \\
\end{tabular} \\
(used) \\
7 = n \\
8 = a \\

\subsubsection{Exponential allocation (n = 8)}
\begin{verbatim}
. . . . . . . . (used)
\end{verbatim}
\[ 8 = n \]
\[ 8 = a \]

\subsubsection{Exponential allocation (n = 9)}
\begin{verbatim}
. . . . . . . . x x x x x x x x (used)
\end{verbatim}
\[ 9 = n \]
\[ 16 = a \]

\subsubsection{Exponential allocation (n = 10)}
\begin{verbatim}
. . . . . . . . . x x x x x x x x x x x x x x x x (used)
\end{verbatim}
\[ 10 = n \]
\[ 16 = a \]


% Exponential allocation diagrams for n = 11, 12, 13
% The following is an attempt to recreate the textual content of the provided slides.
% Note: The graphical representations, such as dot sequences and "x" marks, are represented here as text.
% A proper LaTeX representation would typically use a package like TikZ for graphics, which is not requested here.


\subsubsection{Exponential allocation (n = 11)}
\begin{verbatim}
. . . . . . . . . . .
(used)      x x x x x
11 = n
\end{verbatim}
\( 16 = a \)

\subsubsection{Exponential allocation (n = 12)}
\begin{verbatim}
. . . . . . . . . . . .
(used)       x x x x x
12 = n
\end{verbatim}
\( 16 = a \)

\subsubsection{Exponential allocation (n = 13)}
\begin{verbatim}
. . . . . . . . . . . . .
(used)        x x x x x
13 = n
\end{verbatim}
\( 16 = a \)



% Since the image provided consists of visuals without specific textual content such as sentences, labels, or equations, the LaTeX transcription will be limited to replicating the visible textual annotations associated with each visual.

% First slide
\subsubsection{Exponential allocation (n = 14)}

\begin{itemize}
    \item[] \textcolor{cyan}{\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet} \textcolor{green}{xx} % Used slots are represented by cyan dots and available slots by green 'x's.
    \item (used)
    \item \( 14 = n \) % The number of used slots
    \item \( 16 = a \) % The total number of slots
\end{itemize}

% Second slide
\subsubsection{Exponential allocation (n = 15)}

\begin{itemize}
    \item[] \textcolor{cyan}{\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet} \textcolor{green}{x} % Used slots are represented by cyan dots and available slots by a green 'x'.
    \item (used)
    \item \( 15 = n \) % The number of used slots
    \item \( 16 = a \) % The total number of slots
\end{itemize}


% Third slide
\subsubsection{Exponential allocation (n = 16)}

\begin{itemize}
    \item[] \textcolor{cyan}{\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet\textbullet} % Used slots are represented by cyan dots.
    \item (used)
    \item \( 16 = n \) % The number of used slots
    \item \( 16 = a \) % The total number of slots
\end{itemize}

% The above code uses commands from the xcolor package (for the colored text) and assumes that the relevant colors are defined.
% It also uses the amssymb package for the \textbullet command to represent the dots.
% The slides show graphical representations of the exponential allocation with different numbers of slots used and available.
% In a standard LaTeX document, these would likely correspond to figures or diagrams rather than itemized lists.

\subsubsection{Exponential allocation (n = 17)}
\begin{itemize}
    \item[\textbullet] \textcolor{cyan}{(used)}
    \item $\ldots$
    \item[\textbf{x}] \textcolor{green}{17 = n}
    \item[\textbf{x}] $\ldots$
    \item \textcolor{green}{32 = a}
\end{itemize}

\subsubsection{Exponential allocation (n = 18)}
\begin{itemize}
    \item[\textbullet] \textcolor{cyan}{(used)}
    \item $\ldots$
    \item[\textbf{x}] \textcolor{green}{18 = n}
    \item[\textbf{x}] $\ldots$
    \item \textcolor{green}{32 = a}
\end{itemize}

\subsubsection{Exponential allocation (n = 19,\ldots)}
\begin{itemize}
    \item[\textbullet] \textcolor{cyan}{(used)}
    \item[\textbf{x}] $\ldots$
    \item \textcolor{green}{19 = n}
    \item[\textbf{x}] $\ldots$
    \item \textcolor{green}{32 = a}
\end{itemize}



% Start of LaTeX code

% Define 'verbatim' environment for code block within LaTeX document
\begin{verbatim}
struct dynamic_array {
    void *address;
    size_t n;
    size_t a;
};

int grow(struct dynamic_array *d, size_t new_n)
{
    if (new_n <= d->a) {
        d->n = new_n;
        return SUCCESS;
    }

    size_t new_a = d->a*3;
    while (n > new_a)
        new_a = new_a * 2;

    void *new_addr = malloc(new_a);
    if (new_addr == NULL)
        return ERROR;

    memcpy(new_addr, d->address, d->n); // O(n)
    free(d->address);

    d->address = new_addr;
    d->n = new_n;
    d->a = new_a;

    return SUCCESS;
}
\end{verbatim}

\subsubsection{Pros and cons of exponential allocation}

\begin{itemize}
    \item we waste memory
    \item but we always have \( a \leq 2n \)
    \item specifically, \( a = 2^{\lceil \log_2{n} \rceil} \)
\end{itemize}

\subsubsection{Complexity of exponential allocation}

\begin{itemize}
    \item start with an empty array
    \item increment its size \( n \) times
    \item \(\Rightarrow\) we perform (at most) \( k := \lceil \log_2{(n)} \rceil \) moves,
    of sizes 1, 2, 4, 8, 16, \(\ldots\), \( 2^{k-1} \).
    \item \(\Rightarrow\) total cost:
\end{itemize}

\[
    1 + 2 + 4 + 8 + \ldots + 2^{k-1}
\]

\begin{itemize}
    \item \( = 2^k - 1 \) (power series)
    \item \( = 2^{\lceil \log_2{(n)} \rceil} - 1 \)
    \item \( \leq 2n \)
    \item \( O(n) \) total (for \( n \) size increments)
    \item \( O(1) \) amortized (for each size increment)
\end{itemize}

% End of LaTeX code


% Begin transcription
\begin{center}
\begin{tabular}{ll}
\hline
\textbf{operation} & \textbf{complexity} \\
\hline
access/modify element at arbitrary index & $O(1)$ \\
increase $n$ & $O(1)$ amortized \\
decrease $n$ & $O(1)$ \\
append an element & $O(1)$ amortized \\
discard last element & $O(1)$ \\
insert an element & $O(n)$ \\
delete an element & $O(n)$ \\
\hline
\end{tabular}
\end{center}

\subsubsection{Virtual memory}

In terms of asymptotic complexity, the cost of changing $n$ comes from

\begin{verbatim}
memcpy(new_addr, d->address, d->n); // O(n)
\end{verbatim}

\begin{itemize}
    \item But memory is virtualized,
    \item we do not need to physically move bytes around.
    \item Instead we can use the page table to
    \begin{itemize}
        \item remap the physical memory associated to a virtual address (d->address)
        \item to a different virtual address (new\_addr).
    \end{itemize}
\end{itemize}

\subsubsection{Remapping virtual memory using the page table}

\begin{itemize}
    \item \textbf{Pro:} Memory move becomes essentially $O(1)$ in practice
    \item \textbf{Con:} Need to call the OS kernel to change page table
    \begin{itemize}
        \item context switch (swap page table, pollute caches)
        \item large fixed cost
    \end{itemize}
    \item As a consequence, this is done only when $n$ grows very large (multiple megabytes of data).
    \item $n'$ = $a + K$ for some large $K$ (avoids waste of exponential increase)
\end{itemize}

For very large \( n \):

(multiple megabytes)

\begin{center}
    \begin{tabular}{ l c c }
    \textbf{operation} & \textbf{complexity} \\
    \hline
    access/modify element at arbitrary index & \( O(1) \) \\
    increase \( n \) & \( O(1) \) \\
    decrease \( n \) & \( O(1) \) \\
    append an element & \( O(1) \) \\
    discard last element & \( O(1) \) \\
    insert an element & \( O(n) \) \\
    delete an element & \( O(n) \) \\
    \end{tabular}
\end{center}

\subsection{Linked Lists}

\begin{itemize}
    \item Linked lists implement lists of a variable size \( n \)
    \item They implement
    \begin{itemize}
        \item inserting, deleting, modifying an element (in any position): \( O(1) \)
        \item accessing or modifying all elements in order: \( O(n) \)
    \end{itemize}
    \item They do not natively support
    \begin{itemize}
        \item accessing or modifying an element at an arbitrary index (“random access”)
        \item can be implemented using above (“accessing all elements”), but with complexity \( O(n) \)
    \end{itemize}
\end{itemize}

\subsubsection{Doubly-linked lists}

\begin{verbatim}
struct element {
    struct payload data;
    struct element *prev;
    struct element *next;
};

int insert_after(struct element *e, struct payload data)
{
    struct element *x = malloc(sizeof(struct element));
    if (x == NULL)
        return ERROR;
    
    struct element *f = e->next;
    x->data = data;
    x->prev = e;
    x->next = f;
    e->next = x;
    f->prev = x;

    return SUCCESS;
}
\end{verbatim}

% Table will be represented in tabular environment
\begin{tabular}{lcc}
\hline
\textbf{operation} & \textbf{dynamic array} & \textbf{doubly-linked list} \\
\hline
access/modify element at arbitrary index & \(O(1)\) & \(O(n)\) \\
increase \(n\) & \(O(1)\) & \(O(1)\) \\
decrease \(n\) & \(O(1)\) & \(O(1)\) \\
append an element & \(O(1)\) & \(O(1)\) \\
discard last element & \(O(1)\) & \(O(1)\) \\
insert an element & \(O(n)\) & \(O(1)\) \\
delete an element & \(O(n)\) & \(O(1)\) \\
\hline
\end{tabular}


\subsubsection{Memory management considerations}

Memory allocation is slow

\begin{verbatim}
struct element *x = malloc(sizeof(struct element));
\end{verbatim}

compared to dynamic arrays' fast case

\begin{verbatim}
if (new_n <= d->sz) {
    d->n = new_n;
    return SUCCESS;
}
\end{verbatim}

% The complexity table
\begin{tabular}{lcc}
\hline
\textbf{operation} & \textbf{dynamic array} & \textbf{doubly-linked list} \\
\hline
access/modify element at arbitrary index & $O(1)$ & $O(n)$ \\
increase $n$ & $O(1)$ & $O(1)$ \\
decrease $n$ & $O(1)$ & $O(1)$ \\
append an element & $O(1)$ & $O(1)$ \\
discard last element & $O(1)$ & $O(1)$ \\
insert an element & $O(n)$ & $O(1)$ \\
delete an element & $O(n)$ & $O(1)$ \\
\hline
\end{tabular}

\bigskip

\begin{center}
\subsubsection{Memory caches considerations}
\end{center}

\noindent\textbf{List traversal}

\begin{minipage}[t]{0.5\textwidth}
% Left code block
\begin{verbatim}
for (int i = 0; i < n; i++) {
    struct payload data = dynamic_array[i];
    ...
}
\end{verbatim}
\end{minipage}%
\begin{minipage}[t]{0.5\textwidth}
% Right code block
\begin{verbatim}
struct element *e = first_element;
while (1) {
    struct payload data = e->data;
    e = e->next;
    if (e == first_element)
        break;
}
\end{verbatim}
\end{minipage}

\begin{itemize}
\item assuming deep pipelines and good branch prediction,
\item the processor can start fetching \verb|dynamic_array[i + 1]|\\
while waiting for \verb|dynamic_array[i]|
\item but it cannot start fetching \verb|e->next->data|\\
while waiting for \verb|e->data| / \verb|e->next| (data dependency)
\end{itemize}

% The explanatory notes
Linked list have fewer applications than one could expect.\\
However, when they are appropriate, they can be \textit{extremely useful}.


% This LaTeX transcription is focused on the text content of the lecture slide
% Non-textual elements like background and slide design aren't included
% Code syntax and elements are transcribed as-is, without LaTeX formatting beyond basic structuring

\subsubsection{More options}

\begin{itemize}
	\item Indirection (dynamic array of pointers)
	\item In-memory tree data structures
	\begin{verbatim}
	struct nary_node {
	    struct payload data;
	    struct nary_node *children[MAX_CHILDREN];
	};

	struct dll_node {
	    struct payload data;
	    struct dll_node *prev_sibling;
	    struct dll_node *next_sibling;
	    struct dll_node *first_child;
	};
	\end{verbatim}
	\item \ldots
\end{itemize}