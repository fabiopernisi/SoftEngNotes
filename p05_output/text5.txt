\newpage
\section{Programming Languages}

\subsection{Compilers vs Interpreters}
\subsubsection{Parsing}

Parsing is the process of taking the source code and creating the corresponding abstract syntax tree (AST).

Example:

\begin{verbatim}
t = 3 * ((y * w) + x)
\end{verbatim}

becomes:

% [TBD] - This is where the abstract syntax tree diagram will be placed if this were to be replaced with a LaTeX-tree representation.

\subsubsection{Compiler vs. interpreter}

\begin{itemize}
  \item A compiler:
  \begin{itemize}
    \item parses the source code into an AST
    \item takes the AST and [...] writes the corresponding assembly / machine code
  \end{itemize}
  \item An interpreter:
  \begin{itemize}
    \item parses the source code into an AST
    \item takes the AST and performs the corresponding operations
  \end{itemize}
\end{itemize}

\subsubsection{Pros and cons}
Programming languages can be implemented either through compilation or interpretation, though this is not an inherent property of the language itself. Below are the advantages and disadvantages of interpreters, along with examples and explanations of how languages compile.

\paragraph{Advantages of interpreters:}
\begin{itemize}
    \item Eliminates the compilation step, simplifying the execution process.
    \item Provides portability across different platforms without the need for recompilation.
\end{itemize}


\paragraph{Disadvantages of interpreters:}
\begin{itemize}
    \item Requires the presence of the interpreter on the user's machine.
    \item Typically executes code slower than compiled native machine code.
\end{itemize}

Compiled or interpreted is \textit{not an inherent property} of a language.

\paragraph{Example: Python}
Python, often used as a prime example of an interpreted language due to its reference implementation (CPython), showcases the flexibility of language implementations. CPython compiles Python code to an intermediate form known as bytecode, which it then interprets. However, other implementations like PyPy use Just-In-Time compilation techniques to improve performance, reflecting the language's versatility.\\
Python exemplifies a hybrid approach. While CPython produces bytecode, translating Python code to an intermediate language, it also interprets the bytecode. This intermediate step adds a layer of abstraction that allows Python to be platform-independent while also incurring the typical overhead of interpretation. Moreover, alternative implementations like Cython can compile Python code into optimized C, potentially transforming Python scripts into high-performance executables.

\textbf{Preferred Execution Model:}
Despite the flexibility, languages tend to be associated with a standard execution model based on their common implementations—compiled languages like C and interpreted ones like Python.





\paragraph{Compiled languages:}
\begin{itemize}
  \item C, C++
  \item Rust, Go, Zig
  \item Pascal, Fortran, COBOL
\end{itemize}

\paragraph{Interpreted languages:}
\begin{itemize}
  \item Python, Javascript, Lua
  \item Lisp, Perl, PHP, R, Ruby, VBScript
\end{itemize}

% All non-textual elements that cannot be represented in LaTeX have been replaced with [TBD].
[TBD]

% End of LaTeX transcription.




% Transcription of the image's content into LaTeX format

\subsubsection{Compilation Targets and Strategies}

Understanding the compilation process involves knowing not only how source code is transformed but also what it is compiled into.

\paragraph{Compilation Targets}

Different languages choose different compilation targets:

\begin{itemize}
  \item \textbf{Nim:} Compiles to C code, which is then compiled again to machine code, leveraging the efficiency of C compilers.
  \item \textbf{Dart:} Targets JavaScript, allowing the compiled code to be interpreted by JavaScript engines in web browsers.
  \item \textbf{Java:} Compiles to bytecode for the Java Virtual Machine (JVM), which serves as an abstract processor architecture. The bytecode is portable but requires users to have the JVM for execution.
  \item \textbf{Python:} The CPython interpreter compiles Python into bytecode, which is immediately interpreted. This approach grants Python scripts a level of portability across platforms.
\end{itemize}

\paragraph{Pros and Cons of JVM}

The JVM introduces both advantages and drawbacks:

\begin{itemize}
  \item \textbf{Advantage:} JVM bytecode is platform-independent.
  \item \textbf{Drawback:} It necessitates that the JVM interpreter be installed on the user's machine.
\end{itemize}

\subsubsection{Just-in-Time Compilation}

An alternative approach to traditional compilation is Just-in-Time (JIT) compilation:

\begin{itemize}
  \item JIT avoids long compilation times by compiling code on-the-fly, as it is needed.
  \item This strategy can result in execution that is both portable and fast.
  \item By compiling section-by-section—be it a file, function, or block of code—JIT compilers can optimize at runtime, providing speed without sacrificing flexibility.
\end{itemize}

JIT compilation offers a balance, aiming to combine the best aspects of interpretation (portability) and compilation (speed).

\paragraph{Conclusion}

The choice of a compilation target impacts the distribution, execution, and performance of a programming language. Understanding these concepts is vital for developers to make informed decisions about code deployment and runtime environments.


\subsubsection{Languages with JIT compilation}

\begin{itemize}
    \item Julia
    \item C\#
    \item Java (source code compiled to JVM code; JVM code JIT compiled to native code)
    \item PyPy (Python)
    \item LuaJIT (Lua)
\end{itemize}

% Note: the coloring of the words 'advantage' and 'drawback' should be done using custom commands or by including the xcolor package and defining colors named 'advantage' and 'drawback'. This LaTeX code snippet does not define colors and assumes the document will have the necessary package and color definitions.
% Also, the icons/symbols next to the bullet points are not included since LaTeX doesn't readily support the exact representation of these icons. They should be represented by custom commands if needed.




% Use the 'booktabs' package for better table quality


\subsubsection{Pros and cons (summary)}

\begin{tabular}{lcccc}
\toprule
 & Compiled & Interpreted & Compiled to VM & Just-in-time \\
\midrule
Needs compilation step & yes & no & yes & no \\
Needs interpreter / VM & no & yes & yes & yes \\
Portable & no & yes & yes & yes \\
Speed & fast & slow & in-between & slow at first, then fast \\
\bottomrule
\end{tabular}

\subsubsection{Language summary}

\begin{itemize}
    \item Ahead-of-time (AOT) compiled-to-machine-code languages:
    \begin{itemize}
        \item C, C++, Rust, Go, Zig, Pascal, Fortran, COBOL
        \item Nim (through C)
    \end{itemize}
    \item Purely interpreted languages:
    \begin{itemize}
        \item Lisp, Perl, R, VBScript
    \end{itemize}
    \item Other:
    \begin{itemize}
        \item Python, Lua: internally compiled to bytecode, then interpreted
        \item PyPy (Python), LuaJIT (Lua): internally compiled to bytecode, then JIT compiled
        \item Java, C\#: explicitly compiled to bytecode (bytecode shipped to user), then JIT compiled
        \item Julia: JIT compiled
        \item JavaScript: interpreted and JIT compiled
    \end{itemize}
\end{itemize}

\subsection{Types}

\subsubsection{Static vs. Dynamic Type Checking}

Type systems in programming languages can be broadly classified into static and dynamic type checking mechanisms, each with its approach to ensuring type correctness.

\paragraph{Static Type Checking}
\begin{itemize}
    \item In static type checking, the type correctness of variables is verified at compile-time.
    \item The compiler analyzes the source code and ensures that all type rules are followed before the code is run.
    \item Any type mismatch or type errors are detected and reported as compile-time errors.
    \item Example in C:
    \begin{verbatim}
    int f() {
        return "this is a string" / 5; // Compile-time error
    }
    \end{verbatim}
    \item The advantage of static type checking is that many errors can be caught early in the development process.
    \item It enforces type discipline, as the code must explicitly declare and adhere to type contracts.
\end{itemize}

\paragraph{Dynamic Type Checking}
\begin{itemize}
    \item Dynamic type checking, on the other hand, resolves types at runtime.
    \item It allows more flexibility in the code, as types are enforced when operations are actually performed.
    \item Errors due to type mismatches are thrown during the execution of the program, which may lead to runtime exceptions.
    \item Example in Python:
    \begin{verbatim}
    def f():
        return "this is a string" / 5 # Runtime TypeError
    \end{verbatim}
    \item This flexibility can be advantageous for rapid prototyping and for code that requires dynamic type behavior.
    \item However, it also means that certain types of errors will only surface when the problematic code path is executed.
\end{itemize}

\textbf{Comparative Analysis}\\
While static type checking adds a layer of safety by catching errors early, it requires more upfront declarations and can be more rigid. Dynamic type checking offers flexibility at the cost of potential runtime errors. The choice between static and dynamic typing depends on the specific needs and context of the software project.


\subsubsection{Strong and Weak Typing in Programming Languages}

The terms "strong" and "weak" typing are used to describe how strictly a programming language adheres to type rules, especially concerning type conversions and type safety.

\paragraph{Weak Typing}

Weak typing indicates a language where types may be implicitly converted and operations may succeed even if they do not make sense from a type-safety perspective. Example from C:

\begin{itemize}
    \item Implicit type conversion allows assigning a floating-point number to an integer variable without an error, merely truncating the value.
    \item Pointer type conversions can lead to compiled code that may cause runtime errors or undefined behavior.
\end{itemize}

\begin{verbatim}
int a = -1.8; // Implicitly converted to int, truncated to -1
int *p = (int *)((long int)"abc" + 5); // Compiles, but unsafe
*p = 3; // Dereferencing p could lead to a crash
\end{verbatim}

\paragraph{Strong Typing}

Strong typing means the language enforces strict adherence to typing, preventing implicit, potentially unsafe conversions. Example from Python:

\begin{itemize}
    \item Operations on incompatible types are not allowed and result in a clear error message.
    \item Certain type-related operations are defined within the language, such as multiplying a string by an integer to repeat the string.
\end{itemize}

\begin{verbatim}
>>> "a" + 4
TypeError: Can only concatenate str (not "int") to str

>>> "a" * 4
'aaaa'
\end{verbatim}


The distinction between strong and weak typing can affect the reliability, safety, and clarity of code. Strongly typed languages may prevent subtle bugs at the cost of less flexibility, while weakly typed languages might allow for a wider range of behaviors at the risk of runtime errors.




\subsection{Memory management}
\subsubsection{Manual Memory Management in C}

C programming requires developers to manage memory manually, which includes allocating and freeing memory as needed.

\paragraph{Common Mistakes in Memory Management}

When using \texttt{malloc} for dynamic memory allocation, common mistakes include:

\begin{itemize}
    \item Not checking if \texttt{malloc} actually succeeded in allocating memory.
    \item Forgetting to release memory with \texttt{free}, leading to memory leaks.
\end{itemize}

\paragraph{Example of Poor Memory Management}
The following C function \texttt{getint} does not check for allocation failure and forgets to free the allocated memory:

\begin{verbatim}
int getint() {
    char *buffer = malloc(1024);
    size_t n = fread(buffer, 1, 1023, stdin);
    buffer[n] = '\0';
    return strtol(buffer, NULL, 0);
    // Missing free(buffer) leads to a memory leak
}
\end{verbatim}

\paragraph{Corrected Memory Management}
A more robust version of the function includes error checking and properly frees the allocated memory.

\paragraph{Key Takeaways}

Proper memory management is crucial in C to avoid errors and resource leaks. Developers must ensure that every \texttt{malloc} call is paired with a corresponding \texttt{free} and that all potential errors are checked and handled appropriately.



\subsubsection{Automatic memory management}
Automatic memory management simplifies the developer's job by abstracting the details of allocating and freeing memory. This is commonly seen in higher-level languages like Python.\\
Here, memory management is handled automatically through mechanisms like \textbf{reference counting} and \textbf{garbage collection}, which track and manage memory usage without direct intervention from the programmer.


\textbf{Example}
\begin{verbatim}
def getint():
    buffer = input()
    return int(buffer)
\end{verbatim}

% Slide title "How does automatic memory management work?"
\subsubsection{How does automatic memory management work?}

\begin{itemize}
    \item \textbf{Reference Counting:} It is the process of tracking how many references exist to a particular object in memory.
    \begin{itemize}
        \item When an object is created, its reference count is set to one.
        \item The reference count is incremented each time the object is referenced and decremented when the reference goes out of scope.
        \item When the reference count drops to zero, the object's memory is deallocated.
    \end{itemize}
    \item \textbf{Garbage Collection:} Complements reference counting by handling cyclic references where two or more objects refer to each other, preventing their reference counts from reaching zero.
\end{itemize}


% The title is not provided in the image, so it is left out in the LaTeX document

\paragraph{Refcount example} 
Consider the following pyhton function:
\begin{lstlisting}
def f():
    s = ("abc" + "def") + "ghi"
    t = s
    return t
\end{lstlisting}

\begin{enumerate}
  \item "abc" created, refcount 1
  \item "def" created, refcount 1
  \item "abcdef" created, refcount 1
  \item ("abc" + "def") is done, "abc" refcount 0, "def" refcount 0, both freed
  \item "ghi" created, refcount 1
  \item "abcdefghi" created, refcount 1
  \item ("abc" + "def") + "ghi" is done, "abcdef" and "ghi" freed
  \item s = "abcdefghi" done, but it is an assignment, refcount of "abcdefghi" stays 1
  \item s referenced, refcount of "abcdefghi" becomes 2
  \item t = s done, but it is an assignment, refcount stays 2
  \item t referenced, refcount of "abcdefghi" becomes 3
  \item return t is done, but it is a return, refcount of "abcdefghi" stays 3
  \item s and t go out of scope, refcount of "abcdefghi" becomes 1
\end{enumerate}

\subsubsection{Problem with refcounting}
\paragraph{Cycles:}

\begin{lstlisting}
class C:
    pass

def do_nothing():
    a = C()
    t = a
    for i in range(10000000):
        n = C()
        t.prev = t
        t = n
    a.prev = t
    return 1
\end{lstlisting}

% End of the LaTeX document with the lecture content





\subsubsection{Garbage collection}

\begin{itemize}
  \item keep track of all variables in scope
  \item keep track of all allocated blocks of memory
  \item every few seconds, ``garbage collection''
    \begin{itemize}
      \item look through all the variables, if they reference some memory, mark it as in-use
      \item look at every block, if not referenced, free it
    \end{itemize}
\end{itemize}

\begin{itemize}
  \item \textbf{Pro:} does not suffer from cycle issue
  \item \textbf{Con:} memory usage can grow a lot between garbage collections
  \item \textbf{Con:} garbage collections pauses can block the process for a long time (making it feel unresponsive)
\end{itemize}

\subsection{Other Language Features}


\subsubsection{Macros}
Macros in C are preprocessor directives that allow for automatic generation of source code fragments.

\paragraph{Example and Usage}
\begin{itemize}
    \item An example macro in C that repeats arguments:
    \begin{verbatim}
    #define THIS_5X(a) a, a, a, a, a
    int array[10] = { THIS_5X(1), THIS_5X(2) };
    \end{verbatim}
    This expands into an array initialization with repeated values.

    \item Macros can calculate the number of elements in an array:
    \begin{verbatim}
    #define ARRAY_ELEMENTS(a) (sizeof(a) / sizeof((a)[0]))
    \end{verbatim}
\end{itemize}

\paragraph{Cautions with Macros}
Macros are simple text replacements and can lead to unexpected results without careful use.
\begin{itemize}
    \item Incorrect macro that doesn't account for operator precedence:
    \begin{verbatim}
    #define PRODUCT_WRONG(a, b) a * b
    int a = PRODUCT_WRONG(1 + 2, 3 + 4); // Yields 11, not 21
    \end{verbatim}
    
    \item Corrected macro with parentheses ensuring proper precedence:
    \begin{verbatim}
    #define PRODUCT_CORRECT(a, b) ((a) * (b))
    int a = PRODUCT_CORRECT(1 + 2, 3 + 4); // Correctly yields 21
    \end{verbatim}
\end{itemize}

\subsubsection{Generics}
Generics provide a way to write functions and data structures that can operate on any data type.

\paragraph{Generics in Different Languages}
\begin{itemize}
    \item In C, without built-in generics, functions must be written for each data type:
    \begin{verbatim}
    void int_array_sort(int *array, int size);
    void float_array_sort(float *array, int size);
    \end{verbatim}

    \item Python's dynamic type checking negates the need for explicit generics:
    \begin{verbatim}
    def array_sort(array):
        # Works for any type that supports comparison and sorting
    \end{verbatim}

    \item C++ introduces templates, which are its way of implementing generics:
    \begin{verbatim}
    template <typename T>
    void array_sort(T *array);
    \end{verbatim}
    Templates allow functions and classes to operate with any type.
\end{itemize}

\paragraph{Implications}
Understanding macros and generics is fundamental for writing reusable and efficient code. While macros offer powerful text manipulation at compile-time, generics enable type-agnostic programming, leading to more flexible and maintainable codebases.

% Languages with generics section
\subsubsection{Languages with generics}

\begin{itemize}
    \item C++
    \item C\#
    \item Java
    \item Go
    \item Rust
    \item Swift
    \item TypeScript
    \item \ldots
\end{itemize}




\subsubsection{Object-oriented programming}

A compound type is any type that is defined in terms of one or more other types.

\begin{itemize}
    \item In C:
\begin{verbatim}
struct point {
    float x;
    float y;
};
\end{verbatim}

    \item In Python:
\begin{verbatim}
class Point:
    def __init__(self):
        self.x = 0.0
        self.y = 0.0
\end{verbatim}
\end{itemize}

In object-oriented programming (OOP), compound types (``classes'')
can have functions attached to them (``methods'').

As a consequence, in OOP, \emph{data} and the \emph{methods} that operate on them are usually defined close together.

We can construct complex type hierarchies:
\begin{itemize}
    \item define a class for \emph{vehicle}, has a price method
    \item define a class for \emph{bike}, inherits from \emph{vehicle}
    \begin{itemize}
        \item inherits the price method from \emph{vehicle} (no need to rewrite it)
        \item among other properties, has two wheels
    \end{itemize}
    \item define a class for \emph{car}, inherits from \emph{vehicle}
    \begin{itemize}
        \item inherits the price method from \emph{vehicle} (no need to rewrite it)
        \item among others has four wheels
    \end{itemize}
    \item etc.
\end{itemize}



% The content of the lecture in LaTeX format

\subsubsection{Functional programming}

Functional programming treats functions as "first-class" citizens of the programming language.

\begin{itemize}
    \item Functions can be used within expressions.
    \item Functions can be assigned to variables, passed as arguments, or returned from other functions.
\end{itemize}
\textbf{A python example}
\begin{verbatim}
def map(array, fn):
    r = array.copy()
    for i in range(len(array)):
        r[i] = fn(r[i])
    return r

def double_it(x):
    return x * 2

map([0, 1, 2, 3, 4], double_it)
# -> [0, 2, 4, 6, 8]
\end{verbatim}

\subsubsection{Declarative and logic programming}

Declarative programming focuses on describing \textit{what} the program should accomplish rather than specifying \textit{how} to achieve it.

\paragraph{Logic Programming}
\begin{itemize}
    \item In logic programming, the programmer defines the desired results by specifying constraints and relationships, not the steps to solve the problem.
    \item An example is using SAT solvers to determine the satisfiability of logical formulas.
\end{itemize}


\paragraph{Example SAT formulas:}

\begin{verbatim}
x1 and (not x2 or x3) and (not x3)
\end{verbatim}
This SAT formula describes a logical constraint. The solver's role is to find a solution that satisfies this constraint, without the programmer detailing the steps to find such a solution.