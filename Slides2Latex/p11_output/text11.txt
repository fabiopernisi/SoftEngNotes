\newpage
\section{Specifications}
\subsection{A note about C}

\subsubsection{Why C?}
\begin{itemize}
    \item The C language has deep flaws
    \item but the C ABI is everywhere:
    \begin{itemize}
        \item CPU and OS vendors define the ABI for C function calls
        \item OS services are typically provided via C functions:
        \begin{itemize}
            \item Win32 and WinRT (even though WinRT is C++)
            \item MacOS's Cocoa uses the Objective-C ABI (a superset of the C ABI)
            \item Linux kernel ABI
        \end{itemize}
        \item almost all other languages support calling into C code
    \end{itemize}
\end{itemize}

\subsubsection{Why the C ABI?}
The C ABI is simple:
\begin{itemize}
    \item just functions and simple types: integer, pointer, \texttt{struct}
    \item no objects or methods
    \item no exceptions
\end{itemize}
% End of the LaTeX transcription of the lecture material


% LaTeX transcription of the lecture's text content

\subsubsection{Other ABIs}

\begin{itemize}
    \item There are multiple C++ ABI specifications
    \begin{itemize}
        \item but they change over time (no ``stable'' ABI)
        \item even across versions of the same compiler
    \end{itemize}
    \item There is no Rust ABI specification
\end{itemize}

\subsection{Specifications}

% And another section break or page break
\subsubsection{What is even the C language?}

\subsubsection{Questions}
\begin{itemize}
    \item What is (and is not) valid C?
    \item Who defines the C language?
    \item What does \texttt{-std=c2x} mean?
\end{itemize}

% Slide break - LaTeX does not support 'slide' concept outside of presentations classes like Beamer,
% but the content is continued as a separate section for clarity

% "What is valid C?" slide
\subsubsection{What is valid C?}
\begin{itemize}
    \item Pragmatically, C code is valid if your compiler produces a valid executable.
    \item However, there are many compilers.
    \item It would be convenient if they agreed on a definition for the C language.
\end{itemize}

\textit{In the beginning, there was K\&R C (1978)}

\begin{itemize}
    \item 1978: Kernighan and Ritchie publish their book
    \item 1983: The American National Standards Institute (ANSI) forms a committee to standardize C
    \item 1989: The committee publishes the standard, ``ANSI C'' / ``C89''
    \item 1990: The International Organization for Standardization (ISO) adopts the standard
    \item 1999: ISO updates the standard (ANSI adopts it): ``C99''
    \item 2011: ISO update: ``C11''
    \item 2017: ISO update: ``C17''
    \item 2023: ISO working on update ``C23'', provisionally ``C2x''
\end{itemize}

Hence \verb|-std=c2x|

\subsubsection{Who defines the C language nowadays?}

\begin{itemize}
    \item A ``working group'' within ISO: ``WG14''
    \begin{itemize}
        \item Compiler writers
        \item Hardware vendor representatives
        \item OS maintainers
        \item Academics
    \end{itemize}
    \item \textgreater{} C23 draft (742 pages)
\end{itemize}

\subsection{Behaviours}

\subsubsection{Locale-Specific Behavior}

Behavior that depends on local conventions (nationality, culture, and language) that each implementation documents.

\paragraph{Example}

Whether \texttt{islower()} returns true for characters other than the 26 lowercase Latin letters.

\begin{verbatim}
int a = islower('Ã¦');
\end{verbatim}

\subsubsection{Unspecified Behavior}

\begin{itemize}
  \item Behavior upon which this document provides two or more possibilities and imposes no further requirements on which is chosen in any instance
  \item Behavior that results from the use of an unspecified value
\end{itemize}

\paragraph{Examples}

\begin{itemize}
  \item The order in which the arguments to a function are evaluated.
  \item Value of padding bytes:
\end{itemize}

\begin{verbatim}
struct s {
    char a; // 1 byte
    // 3 padding bytes
    int b;  // 4 bytes
};
\end{verbatim}

\subsubsection{Implementation-defined Behavior}

Unspecified behavior where each implementation (compiler / platform / OS) documents how the choice is made

\paragraph{Example}

The propagation of the high-order bit when a signed integer is shifted right.

\begin{verbatim}
int a = -8;
int b = a >> 1;
\end{verbatim}

On x86\_64 and AArch64: sign-extend

\subsection{Undefined Behavior}

Behavior, upon use of a nonportable or erroneous program construct or of erroneous data,
for which this document imposes no \textbf{requirements}.

\textbf{Possibly:}
\begin{itemize}
    \item ignoring the situation completely with unpredictable results,
    \item implementation-defined behavior
    \item compilation or execution yields error message
    \item compilation or execution crashes
    \item \textbf{anything else}
\end{itemize}

\textbf{Example}
\begin{verbatim}
int *a = NULL;
int b = *a;
\end{verbatim}

\subsubsection{Easy UB: division by zero}

``The result of the \texttt{/} operator is the quotient from the division of the first operand by the second;
the result of the \texttt{\%} operator is the remainder.

In both operations, if the value of the second operand is zero, the behavior is undefined.''

\begin{itemize}
    \item A simple C program that attempts to divide by zero can cause a runtime error:
    \begin{verbatim}
    int main(int argc) {
        return 5 / (argc - 1);
    }
    \end{verbatim}
    When \texttt{argc} is 1, the program attempts to divide by zero, resulting in a floating-point exception.

    \item Compiling with warnings enabled can alert the developer to the potential issue:
    \begin{verbatim}
    clang -O3 -std=c2x -o main main.c
    main.c:3:11: warning: division by zero is undefined
    \end{verbatim}
    
    \item The actual result of running the compiled program may vary, producing different outputs or crashing:
    \begin{verbatim}
    ./main
    -882586408
    1687000168
    -1071941800
    -60110776
    \end{verbatim}
\end{itemize}

\subsubsection{Easy UB: division overflow}
Integer division in C follows specific rules, but certain edge cases, like division overflow, can result in undefined behavior.\\

\textbf{Truncation Towards Zero}
\begin{itemize}
    \item The result of the \texttt{/} operator is the algebraic quotient with any fractional part discarded, a process known as truncation toward zero.
    \item For example, both \texttt{5 / -2} and \texttt{-5 / 2} would result in \texttt{-2}.
\end{itemize}

\textbf{Representability and Equality}
\begin{itemize}
    \item If the quotient \texttt{a/b} is representable in the data type of the result, then the equation \texttt{(a/b)*b + a\%b} should equal \texttt{a}.
    \item This property is used to confirm that division and modulus operations are consistent with mathematical definitions.
\end{itemize}

\textbf{Undefined Behavior in Division}
\begin{itemize}
    \item When \texttt{a/b} produces a quotient that is not representable, such as an integer division by zero or division overflow, the behavior is undefined.
    \item Undefined behavior means the output and side effects of the code are unpredictable and not reliable.
\end{itemize}

\paragraph{Example}
Consider the following C code that demonstrates undefined behavior due to division overflow:

\begin{verbatim}
#include <stdio.h>
#include <limits.h>

void print_if_negative(int a) {
    if (a >= 0) return;
    printf("a = %d\n", a);
    printf("a / -1 = %d\n", a / -1);
}

int main() {
    print_if_negative(INT_MIN);
    return 0;
}
\end{verbatim}

\subsubsection{Explanation}
\begin{itemize}
    \item The largest positive value an \texttt{int} can represent is \texttt{INT\_MAX}, and the smallest negative value is \texttt{INT\_MIN}.
    \item Dividing \texttt{INT\_MIN} by \texttt{-1} is undefined because the positive result cannot be represented as an \texttt{int} (it would be one more than \texttt{INT\_MAX}).
    \item Compilers may produce a warning, and the program may exhibit unexpected behavior when executed.
\end{itemize}


\subsubsection{Integer overflow}
Overflow occurs when an arithmetic operation exceeds the maximum size that can be represented within a given number of bits.

\subsubsection{Unsigned Integer Overflow}

\begin{itemize}
    \item Unlike signed integer overflow, unsigned integer overflow is well-defined in C.
    \item It exhibits wrap-around behavior, meaning that if the result of an operation is too large to be represented in the given unsigned type, it wraps around from the largest representable number back to zero.
\end{itemize}

\paragraph{Example of Unsigned Overflow}

The following C code demonstrates unsigned integer overflow:

\begin{verbatim}
#include <stdio.h>
#include <stdint.h>

int main() {
    uint8_t a;
    for (int i = 0; i < 1000; i++) {
        printf("%012" PRIu8 "\n", a);
        a = a + 1;
    }
    return 0;
}
\end{verbatim}

\textbf{Explanation}
\begin{itemize}
    \item The \texttt{uint8\_t} type is an 8-bit unsigned integer, capable of representing values from 0 to \(2^8 - 1\) (255).
    \item When the loop increments \texttt{a} beyond 255, it wraps around to 0 due to unsigned overflow.
    \item This behavior is predictable and consistent with the C standard.
\end{itemize}

\textbf{Wrap-around Behavior}

\begin{itemize}
    \item If \texttt{i} and \texttt{j} are \(n\)-bit unsigned integers, the result of \texttt{i + j} is \((i + j) \mod 2^n\).
    \item This property ensures that any operation on unsigned \(n\)-bit integers produces the bottom \(n\) bits of the true arithmetic value.
\end{itemize}

\textbf{Hardware Implementation}

\begin{itemize}
    \item Modern architectures like x86\_64 and ARM64 adhere to this behavior in their instruction sets, handling unsigned integer overflow by wrapping around.
\end{itemize}

\subsubsection{Signed integer overflow}

While hardware architectures like x86$\_$64 and AArch64 have instructions that exhibit wrap-around behavior on overflow, the C language standard specifies that signed integer overflow is undefined behavior.

\paragraph{Example}

Consider this C code snippet:

\begin{verbatim}
#include <stdio.h>
#include <limits.h>

void print_if_positive(int a) {
    if (a < 0)
        return;

    printf("a = %d\n", a);
    printf("a + 1 = %d\n", a + 1);

    if (a + 1 > 0)
        printf("a + 1 = %d is positive\n", a + 1);
}

int main() {
    print_if_positive(INT_MAX);
    return 0;
}
\end{verbatim}

\textbf{Explanation}
\begin{itemize}
    \item The code attempts to increment an integer \texttt{a} that is already at \texttt{INT\_MAX}, the largest value a signed integer can hold.
    \item Theoretically, adding 1 to \texttt{INT\_MAX} would wrap around to \texttt{INT\_MIN} due to overflow, but in C, this behavior is not guaranteed and should not be relied upon.
    \item The actual output of the program can vary depending on how the compiler chooses to handle the overflow.
\end{itemize}


\subsubsection{Invalid Pointer Dereferencing}

When a pointer in C is assigned an invalid value, dereferencing it results in undefined behavior.\\

\textbf{Standards Specification}
\begin{itemize}
    \item The C standard states: "If an invalid value has been assigned to the pointer, the behavior of the unary \texttt{*} operator is undefined."
    \item This can lead to various issues, including segmentation faults, data corruption, or other erratic behavior.
\end{itemize}

\textbf{Example and Consequences}

Here's a C code snippet that can cause undefined behavior due to invalid pointer dereferencing:

\begin{verbatim}
int int_at(int *pointer) {
    int r = *pointer;
    return r;
}

int main() {
    printf("%d", int_at((int *)1)); // Invalid pointer dereference
    return 0;
}
\end{verbatim}

\textbf{Analysis}
\begin{itemize}
    \item The function \texttt{int\_at} attempts to dereference a pointer that has been cast from an integer with value 1, which is not a valid memory address for an \texttt{int}.
    \item Running this code typically results in a segmentation fault, as the address does not point to a legitimate memory location.
\end{itemize}

\textbf{Handling Invalid Pointers}

\begin{itemize}
    \item To avoid undefined behavior, pointers should always be validated before dereferencing.
    \item For instance, checking if a pointer is \texttt{NULL} before using it can prevent some forms of invalid pointer dereferencing.
\end{itemize}

\paragraph{Example of Pointer Validation}

A safer version of the function would include a check for \texttt{NULL}:

\begin{verbatim}
int int_at(int *pointer) {
    if (pointer == NULL) {
        return 0; // Or another error-handling strategy
    }
    int r = *pointer;
    return r;
}
\end{verbatim}