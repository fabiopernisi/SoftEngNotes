\newpage
\section{Lecture 18}

\subsection{Hardware performance counters}

The simplest hardware-aided performance-measuring tool is:
the \textbf{time stamp counter (TSC)}
\begin{itemize}
    \item Introduced by \textbf{Intel} with the Pentium architecture (1993)
    \item Similar feature available on \textbf{ARM} since ARMv7 (1996)
    \item Special integer register
    \item Incremented by one at a constant rate (e.g. every clock cycle)
    \item Reading this register has high latency ($>$10 cycles)
    \item Useful for microbenchmarks and instrumentation
    \item \texttt{time.time()} / \texttt{clock\_gettime()} use this internally
\end{itemize}
\subsubsection{More complex performance counters}

Since then, Intel and ARM have added many more performance counters:

\begin{itemize}
  \item executed (“retired”) instructions
  \item branches
  \begin{itemize}
    \item successfully predicted
    \item mispredicted branches
  \end{itemize}
  \item memory accesses
  \begin{itemize}
    \item found in L1 cache
    \item L1 misses, found in L2 cache
    \item L2 misses, found in (last-level) L3 cache
    \item L3 misses, found in main memory
  \end{itemize}
  \item TLB (page table cache) hits
  \item TLB misses
\end{itemize}

\begin{itemize}
  \item Pros
  \begin{itemize}
    \item always measured
    \item no performance penalty
    \item no interference with normal execution
  \end{itemize}
  \item Cons
  \begin{itemize}
    \item only an aggregate measure (totals)
  \end{itemize}
\end{itemize}

\subsubsection{Linux perf}

\texttt{perf stat ./application} gives various performance metrics for ./application, like cycles, instructions, etc. 

\subsection{Stochastic Instrumentation}

\subsubsection{Limitations of performance counters}

\begin{itemize}
    \item How could we find \textbf{hot spots}\\
    (small groups of instructions that the application spends a lot of time running)
    
    \item What about performance counts (cache misses, mispredicted branches,\ldots)\\
    at those \textbf{hot spots}?
    
    \item Instrumentation is expensive (and affects accuracy)
\end{itemize}

\paragraph{Solution: stochastic instrumentation}

\begin{itemize}
    \item every N cycles (e.g., every 1,000,000th cycle / every 0.1ms), a \textbf{sample} is taken
    \item the \textbf{sample} records:
    \begin{itemize}
        \item which instruction is currently being executed
        \item optionally, what it is waiting for (instr. decoding, pipeline bubble, memory access,\ldots)
        \item optionally, instruction addresses of the last few branches
        \item optionally, whether those branches were successfully predicted
    \end{itemize}
\end{itemize}

\subsubsection{Stochastic instrumentation}
\begin{itemize}
    \item Pros
    \begin{itemize}
        \item no performance penalty
        \item no interference with normal execution
        \item accuracy naturally increases on hotspots
    \end{itemize}
    \item Cons
    \begin{itemize}
        \item none
    \end{itemize}
\end{itemize}

\subsubsection{Analysis applications}

\begin{itemize}
  \item Linux
  \begin{itemize}
    \item \texttt{perf record / perf report}
    \item KDAB hotspot
  \end{itemize}
  \item MacOS: Apple XCode Instruments
  \item Windows: Visual Studio (``dynamic instrumentation'' / ``collection via sampling'')
  \item Intel-specific: vTune
  \item AMD-specific: uProf
\end{itemize}

\subsubsection{Bottom-up analysis}
[TBD] - Placeholder for the bottom-up analysis image from the Intel VTune Profiler

\subsubsection{Flame graphs}
[TBD] - Placeholder for the flame graphs image