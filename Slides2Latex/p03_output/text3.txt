\newpage
\section{Compilation, Operating Systems, Virtual Memory}

\subsection{Compilation}

\textbf{A compiler:}

\begin{itemize}
    \item reads source code,
    \item forms chunks of
    \begin{itemize}
        \item data (constants, global variables)
        \item executable machine code (functions)
    \end{itemize}
    \item associates a \textit{symbol} to each chunk (variable or function name)
    \item writes all into an ``object'' (“.o”) file (format: ELF, COFF, Mach-O)
\end{itemize}

The compiler leaves blank all \textit{references to symbols} (incl. external symbols like global variables and global functions)


\subsubsection{Linking}

A linker reads ``object'' files and writes an executable file.

\begin{itemize}
  \item it assigns a position in memory to every chunk of code and data
  \item it sets the value of the corresponding \textbf{symbol} to this position
  \item it resolves all references to \textbf{symbols}:
  replaces all references with the numeric value of the corresponding position in memory
\end{itemize}

\subsubsection{Static and dynamic linking}

\begin{itemize}
    \item Static linking is performed in order to prepare an executable (.exe, ...) file.
    \item Dynamic linking is performed every time the executable is run
    \begin{itemize}
        \item Object files built to be dynamically linked are called
        \begin{itemize}
            \item shared objects (.so, Linux, MacOS), or
            \item dynamically-linked libraries (.dll, Windows)
        \end{itemize}
        \item Typically used for
        \begin{itemize}
            \item System libraries
            \item Plugins
        \end{itemize}
    \end{itemize}
\end{itemize}

\paragraph{Why a separate linking phase?}

\begin{itemize}
    \item Separate linking simplifies compilations
    \begin{itemize}
        \item (allows the compiler to write code using functions and variables it has not seen yet)
    \end{itemize}
    \item It allows us to break down our code into multiple files...
    \begin{itemize}
        \item that can be compiled separately
    \end{itemize}
    \item It allows using code written and compiled by other people
    \begin{itemize}
        \item saves time
        \item lets us use closed-source software
    \end{itemize}
    \item Dynamic linking allows us to use system libraries without shipping them
    \item It reduces the size of executables
    \item It helps in masking some system incompatibilities
    \begin{itemize}
        \item (e.g., run the same .exe on Windows 10 and 11)
    \end{itemize}
    \item It allows updating system libraries separately
    \item The compiler does not know the code inside external object files
    \begin{itemize}
        \item it cannot check for mistakes based on that knowledge
        \item it cannot optimize code based on that knowledge (at least for dynamic linking)
    \end{itemize}
    \item Dynamically-linked libraries add complexity
    \begin{itemize}
        \item (separate installation, incompatible versions, etc.)
    \end{itemize}
\end{itemize}

% The [TBD] tokens represent non-textual elements in the original image that are not transcribed to LaTeX.




% Start of LaTeX content for transcribing the lecture notes

\subsubsection{Libraries}

Libraries are collections of functions (and data) that can be used by different executables
Examples:
\begin{itemize}
    \item \texttt{libjpeg}: read/write jpeg files
    \item \texttt{libssl}: cryptography
    \item \texttt{BLAS}: fast vector and matrix operations
    \item \texttt{Qt}: cross-platform GUI toolkit
\end{itemize}

Most languages have a \textit{standard library}
\begin{itemize}
    \item Distinct from the language itself, but usually necessary in any program
    \item The C language provides no functions. \\
    (All basic utilities (\texttt{strlen}, \texttt{printf}, \texttt{exit}) come from the standard library.)
    \item It is normally \textbf{dynamically linked}
\end{itemize}

\subsubsection{Optimizing compilers}

Optimizing compilers aim to improve the efficiency and performance of code during the compilation process. An example of such optimization is demonstrated through a simple C program:
\begin{verbatim}
int main() {
    int r = 0;
    for (int i = 0; i < 1000000; i++) {
        r = r + 2;
    }
    return r;
}
\end{verbatim}

Instead of executing the loop one million times at runtime, the compiler optimizes the code by pre-calculating the final value of the variable \texttt{r}. This is achieved by a technique known as \textit{constant folding}, where the compiler evaluates the result of constant expressions at compile time rather than at runtime.

\paragraph{Note}
\begin{itemize}
    \item ``Optimal'' = ``best''
    \item ``Optimizing'' = ``going towards the best possible result''
    
    \item Do not say: ``I made my code \textit{more optimal}''
    \item Do say: ``\textit{I optimized my code some more}'' \\
    or \\
    ``\textit{I made my code faster}''
\end{itemize}

% End of LaTeX content for transcribing the lecture notes




% This is a LaTeX transcription of the textual content from an image of lecture material on Operating Systems
% Please note that it is intended for direct use in a LaTeX editor and compilation without modification.
% You will need to ensure that your LaTeX environment has the appropriate packages installed to handle lists and sections.

\subsection{Operating Systems}

The operating system (OS) manages the computer and provides services to applications.

\subsubsection{Components}

\begin{itemize}
  \item The kernel handles:
  \begin{itemize}
    \item most of the boot process (what happens upon power on)
    \item memory allocation and sharing
    \item input/output devices, through ``drivers'' (often dynamically loaded)
    \item application coexistence and cooperation
  \end{itemize}
  \item Optionally:
  \begin{itemize}
    \item Standard libraries for some languages (C, C++, .NET, Swift, \ldots)
    \item Some additional common libraries
    \item User interface (UI): command-line (CLI), graphical (GUI)
    \item Some tools: CLI utilities, compilers, settings/configuration apps
  \end{itemize}
\end{itemize}

\paragraph{Popular OSs:}

\begin{itemize}
  \item Windows
  \item MacOS, iOS (base OS: Darwin, kernel: XNU)
  \item Android, SteamOS (kernel: Linux)
\end{itemize}

\paragraph{Other current OSs:}

\begin{itemize}
  \item Debian, Ubuntu, Suse, Fedora, Arch, RHEL, AL2 (base OS: GNU, kernel: Linux)
  \item FreeBSD, OPNsense, TrueNAS, pfSense (base OS \& kernel: FreeBSD)
  \item OpenBSD
\end{itemize}

All the above except Windows are descendants from ``Unix''




% Start of LaTeX code


% Slide title: omitted as per the instruction
\subsubsection{Example: File Handling in C on Linux Systems}
In C programming on Linux systems, file operations are commonly handled using functions provided by the standard library. For instance, to open a file for reading, the \texttt{fopen} function is used:
\begin{verbatim}
    FILE *f = fopen("my\_file.txt", "r");    
\end{verbatim}

The \texttt{fopen} function is part of the standard library and performs the following actions:

\begin{itemize}
    \item Calls Unix-specific \texttt{open()} function, also in the standard library.
    \item Acts as a high-level wrapper for the \texttt{open} system call in the Linux kernel.
    \item Allocates a structure which includes buffers for data and the file descriptor.
    \item Returns a file descriptor (of type \texttt{int}) upon successful opening of the file.
\end{itemize}

The \texttt{open} system call in the Linux kernel uses the filesystem and storage device drivers, such as SSD drivers, to access the file.

\subsubsection{Levels of abstraction}
\begin{itemize}
    \item the processor only does elementary operations (move 64-bit to/from memory)
    \item the \textit{kernel} implements basic functionality (managing devices, reading data from a file)
    \item the \textit{standard library} provides more, OS-independent functionality (buffering, parsing data)
    \item other \textit{libraries} may allow even more (e.g., decompressing a video file)
\end{itemize}

% Slide title: MEMORY (AGAIN)
\subsection{Memory (again)} % creating a non-numbered section for MEMORY (AGAIN)
\subsubsection{Memory Virtualization}
Memory virtualization is a fundamental concept in modern computing systems. It allows each process to see memory as if it were the only process running on the system. This isolation is achieved through the following mechanisms:

\begin{itemize}
    \item Each time a process accesses memory, the hardware translates the virtual address provided by the process into a physical hardware address.
    \item This translation is performed using a \textit{page table}, which is managed by the operating system's kernel.
\end{itemize}

\paragraph{An example}
Consider the C code example provided:

\begin{verbatim}
#include <stdio.h>

int the_number = -1;

int main() {
    scanf("%d", &the_number);
    return 0;
}
\end{verbatim}

The assembly instructions corresponding to the \texttt{scanf} function call might look like this:

\begin{verbatim}
# x86_64 Assembly
mov eax, DWORD PTR [4100]
\end{verbatim}

\paragraph{Page table (managed by the kernel)}

Here's how the memory virtualization works in this context:

\begin{itemize}
    \item The processor looks up virtual address 4100 in the page table.
    \item It identifies the page (in this case, page 1), finds the base hardware address for the page (20480), and adds the offset within the page (4).
    \item Consequently, the actual memory access takes place at the hardware address 20484 (20480 + 4).
\end{itemize}

The page table example shows the mapping from virtual addresses to hardware addresses:\\

\begin{tabular}{|c|l|l|}
\hline
\textbf{page} & \textbf{virtual address} & \textbf{hardware address} \\
\hline
0 & 0 -- 4095 & 65536 -- 69631 \\
1 & 4096 -- 8191 & 20480 -- 24575 \\
2 & 8192 -- 12287 & 4096 -- 8191 \\
... & ... & ... \\
\hline
\end{tabular}

\vspace{3.5mm}
For architectures like ARM (AArch64), the assembly instruction for accessing memory would look different:

\begin{verbatim}
# AArch64 Assembly
ldr w0, [4100]
\end{verbatim}



% For tabular data, an actual tabular environment is used to transcribe the content.


\subsubsection{Page table}
\begin{itemize}
    \item the page table itself is in memory!
    \item at a specific hardware address
    \item various techniques to make page lookup faster (it is a tree, with a cache)
\end{itemize}

\subsubsection{Memory allocation}
\begin{itemize}
    \item The kernel is responsible for finding free hardware addresses that are not in use by any process.
    \item Virtual addresses are managed by the kernel, which can:
    \begin{itemize}
        \item Allocate specific virtual addresses as requested by a process.
        \item Search for and allocate free virtual addresses that are currently unassigned.
    \end{itemize}
    \item Suitable entries are then added to the page table by the kernel.
    \item The kernel returns the virtual address to the requesting process.
\end{itemize}

\subsubsection{Virtual memory}
Virtual memory introduces several advantages and some drawbacks:

\paragraph{Cons:}
\begin{itemize}
    \item The process of translating virtual addresses to physical addresses can be slow.
    \item Initially, any memory sharing between processes requires mediation by the kernel.
\end{itemize}

\paragraph{Pros:}
\begin{itemize}
    \item Simplifies memory management for processes.
    \item Ensures process separation, preventing processes from interfering with each other.
    \item Allows quick relocation of large memory blocks by simply updating page table entries.
    \item Facilitates fast input/output operations as devices can be mapped to virtual addresses.
    \item Supports the extension of memory using various methods:
    \begin{itemize}
        \item Swap space on storage devices.
        \item Memory compression techniques.
        \item Overcommitting memory beyond the physical limits.
    \end{itemize}
\end{itemize}


\subsubsection{Function Calls and Stack Management}

In C, functions use the stack to manage local variables and return addresses. The stack is LIFO (last-in, first-out). 

\textbf{Function f1} initializes with two \texttt{uint64\_t} variables and calls \texttt{f2} and \texttt{f3} in sequence:
\begin{verbatim}
void f1(void) {
    uint64_t a, b;
    f2();
    f3();
}
\end{verbatim}

\textbf{Function f2} allocates a \texttt{uint64\_t} variable and calls \texttt{f3}:
\begin{verbatim}
void f2(void) {
    uint64_t c;
    f3();
}
\end{verbatim}

\textbf{Function f3} may use stack space, which is reclaimed when it returns to \texttt{f2}:
\begin{verbatim}
int f3(void) {
    // function body
}
\end{verbatim}

\texttt{f3} executes and eventually returns to \texttt{f2}, which then returns to \texttt{f1}. Each return unwinds the stack, removing the local variables and return addresses.\\

\textbf{Stack After f3 Returns to f2}\\
After \texttt{f3}'s completion, the stack contains \texttt{f1}'s \texttt{a} and \texttt{b}, along with \texttt{f2}'s \texttt{c}.\\

\textbf{Stack After f2 Returns to f1}\\
Once \texttt{f2} has returned, the stack holds only \texttt{f1}'s variables \texttt{a} and \texttt{b}.\\

\textbf{Function f1 Calls f3 Again}\\
After the completion of \texttt{f2}, \texttt{f1} invokes \texttt{f3} once more, preparing the stack for another potential set of local variables from \texttt{f3}.\\

\textbf{Function f1 Completes}
\begin{verbatim}
void f1(void) {
    // final actions of f1
    return;
}
\end{verbatim}
Finally, \texttt{f1} returns, and the stack is cleared to its state prior to \texttt{f1}'s call.

The lifecycle of the stack from the initiation of \texttt{f1} through the nested calls and back illustrates the LIFO nature of the stack in function call management.


\subsubsection{Stack pointer}
\begin{itemize}
    \item x86\_64: rsp (by convention -- rsp is a general register)
    \item AArch64: sp (mandatorily -- sp is a special register)
    \item In both cases, the stack actually grows downwards
    \item Default stack size on Linux: 8 MB
    \begin{itemize}
        \item theoretical max recursion depth: 1,000,000
    \end{itemize}
\end{itemize}


% Here begins the LaTeX transcription of the lecture content

\subsubsection{Heap}
All the memory that is not on stack is sometimes called the "heap".

\subsection{Tools}

\begin{itemize}
    \item Windows Subsystem for Linux
    \item Basics
    \begin{itemize}
        \item \texttt{cd}, \texttt{ls}, \texttt{less}
        \item TAB completion
        \item command-line parameters, \texttt{-h}
        \item \texttt{man}
    \end{itemize}
    \item package management
    \begin{itemize}
        \item Debian/Ubuntu: \texttt{apt-get}
        \item Fedora/Suse: \texttt{dnf}
        \item MacOS: \texttt{brew}
        \item Windows: \texttt{winget}
    \end{itemize}
\end{itemize}