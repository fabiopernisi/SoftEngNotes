\newpage
\section{Lecture 12}

\subsection{Undefined Behavior}

\subsubsection{Recap}
The C standard use a few key words that have precise definitions.

Examples:
\begin{itemize}
    \item \texttt{isspace()} : ``The \texttt{isspace} function tests for any character that is a standard white-space character or is one of a locale-specific set of characters [\ldots]" (p206)
    \item \texttt{qsort()} : ``[\ldots] If two elements compare as equal, their order in the resulting sorted array is unspecified." (p369)
    \item \textbf{Byte}: ``A byte is composed of a contiguous sequence of bits, the number of which is implementation-defined." (p4)
    \item ``If an object is referred to outside of its lifetime, the behavior is \emph{undefined}." (p36)
  \item Locale-specific behavior: Behavior that depends on local conventions [...] that each implementation documents. (e.g., \texttt{isspace()})
  
  \item Unspecified behavior: Behavior for which there are multiple possibilities. (e.g., \texttt{qsort()})
  
  \begin{itemize}
    \item Implementation-defined behavior: Unspecified behavior where each implementation (compiler / platform / OS) documents which choice is made. (e.g., \texttt{byte})
  \end{itemize}
  
  \item Undefined behavior
\end{itemize}

\paragraph{Undefined behavior}

\textit{``Behavior, upon use of a nonportable or erroneous program construct or of erroneous data, for which this document'' imposes no requirements.''}

\begin{flushright}
\tiny{*C23 standard}
\end{flushright}

Possible consequences:
\begin{itemize}
  \item compilation or execution crashes
  \item situation completely ignored with unpredictable results,
  \item implementation-defined behavior
  \item by chance, nothing happens and everything goes as intended by the programmer (bad!)
  \item anything else
\end{itemize}

\subsubsection{We have already seen}

All of the following trigger undefined behavior:
\begin{itemize}
  \item division by zero
  \item division overflow
  \item signed integer overflow
  \item dereferencing invalid pointers
\end{itemize}

\begin{verbatim}
int main()
{
    int i = INT_MAX + 1;
    int b = (i == 100);
    printf("b = %d\n", b);
    return 0;
}
\end{verbatim}

The compiler is allowed to produce code with output:

\begin{verbatim}
b = 0

b = 1

b = 42
\end{verbatim}

\textit{Deleting all your files now...}

If an expression is UB, it does not just get a "wrong" value: it invalidates the whole program.

\subsubsection{Not an idle threat}

The provided C code sample demonstrates a situation where undefined behavior can occur due to compiler optimizations. A static function pointer is initialized to NULL and is intended to point to a function that would erase all files.

\begin{itemize}
    \item The function \texttt{this\_function\_is\_never\_called} is defined which sets the function pointer to the \texttt{erase\_all\_files} function, but it is never called.
    \item The \texttt{main} function returns the result of the function pointer, which is dereferenced and executed.
\end{itemize}

When compiled with \texttt{gcc} using the \texttt{-O3} optimization flag, the program results in a segmentation fault, as the function pointer is NULL. However, when compiled with \texttt{clang} using the same optimization level, the program executes the function that the pointer is supposed to point to, resulting in the message "Deleting all your files NOW..." and potentially dangerous behavior.

\paragraph{Integer Overflow}
On x86\_64 and AArch64, ``add'' has wrap-around semantics:

add w0, INT\_MAX, 1 $\Rightarrow$ w0 = INT\_MIN

\begin{itemize}
    \item will yield i = INT\_MIN sometimes
    \item still undefined behavior
    \item will create bugs in the future!
\end{itemize}

In another example, an integer overflow case is presented. The function \texttt{f} adds 1 to the maximum value an integer can hold, which due to wrap-around semantics in x86\_64 and AArch64 architectures, results in the minimum integer value:

\begin{itemize}
    \item In a situation where the variable \texttt{i} is set to \texttt{INT\_MAX} and then passed to \texttt{f(i)}, it could sometimes yield \texttt{i = INT\_MIN}.
    \item This behavior is considered undefined, meaning that the compiler is not required to handle this situation in any particular way.
    \item Such scenarios can lead to bugs that are difficult to trace and rectify in the future.
\end{itemize}


Following the C standard, the compiled code is (only) bound to behave as if it was running on the "C abstract machine".

No additional constraints are placed on the compiler when targeting a particular ISA even if that ISA's specification has no undefined behavior

\subsubsection{(Almost) everything wrong is undefined behavior (1)}
"The behavior is undefined in the following circumstances: [...]
An unmatched ' or " character is encountered on a logical source line during tokenization" (p584)

\begin{verbatim}
#include <stdio.h>

int main()
{
    printf("Hello
}

% Error message generated by the compiler
test.c:5:16: error: missing terminating " character
    5 |     printf("Hello
      |                ^
\end{verbatim}

All modern compilers turn this (and all other parsing errors) into implementation-defined behavior specifically: interrupted compilation with error message

\subsubsection{(Almost) everything wrong is undefined behavior (2)}
\begin{verbatim}
#include <stdio.h>

char *f()
{
    char buffer[16]; 
    snprintf(buffer, sizeof(buffer), "Hello");
    return buffer;
}

int main()
{
    char *s = f();
    printf("Here is the return value of f():\n");
    printf("%s\n", s);
    return 0;
}

% Compiler warnings and errors
gcc -O3 -o bug bug.c
bug.c: In function ‘f’:
bug.c:9:16: warning: function returns address of local variable [-Wreturn-local-addr]
    9 |     return buffer;
      |                ^

% Runtime output causing a segmentation fault
./bug
Here is the return value of f():
Segmentation fault (core dumped)
\end{verbatim}
\subsubsection{Undefined behavior can time-travel}

``[...] However, if any such execution contains an undefined operation,
this document places no requirement on the implementation executing
that program with that input (not even with regard to operations
preceding the first undefined operation).''
(C++20, p7)

\begin{verbatim}
int f(int a, int b)
{
    printf("a = %d, b = %d\n", a, b);
    printf("We could get a crash now:\n");
    return a / b;
}
\end{verbatim}

The compiler is allowed to produce an executable that does this:

\begin{verbatim}
a = 10, b = 0
DELETING ALL FILES NOW, HA HA HA HA !!!!!
We could get a crash now:
Floating point exception (core dumped)
\end{verbatim}

\subsubsection{Undefined behavior can time-travel (really)}

The example C code sample demonstrates two critical concepts: handling division by zero and an illustration of what is colloquially known as "time travel" in code execution due to compiler optimizations.

\begin{itemize}
    \item The function \texttt{f(int a, int b)} performs an integer division of \texttt{a} by \texttt{b}. If \texttt{b} is zero, the division would result in a runtime error: a floating point exception.
    \item In the \texttt{main} function, the result of the division is conditionally assigned based on the \texttt{argc} parameter. If \texttt{argc} is less than 2, the result is set to 5; otherwise, it's set to the result of \texttt{strtol} conversion of the second argument. This result is then passed as the divisor to the function \texttt{f}.
    \item When the code is compiled with \texttt{gcc} using optimization flag \texttt{-O3} and executed with \texttt{argc} less than 2, the "time travel" behavior occurs. The compiler optimizes the code in a way that the division by zero exception happens even before the conditional check in \texttt{main} can prevent it.
    \item The assembly output below the code shows the division instruction \texttt{idiv} which is the source of the exception. The program crashes with a floating point exception, demonstrating the consequences of undefined behavior in C.
\end{itemize}

\subsubsection{But why?!??}

\begin{itemize}
  \item Performance!
  \item It is all about letting the compiler make \textbf{assumptions}
  \begin{itemize}
    \item Specifically, the compiler assumes that undefined behavior never happens
  \end{itemize}
\end{itemize}

\subsection{Pointer aliasing rules}

\textit{``Aliasing''} means accessing a single object (area of memory) through distinct pointers.

The C standard specifies \textit{``strict aliasing''}:

An object can only be accessed (both read or written) through pointers to that type of object.

$\Rightarrow$ If two pointers have different types, they \textbf{must} point to distinct objects.

``An object shall have its stored value accessed only by an lvalue expression
that has one of the following types:

\begin{itemize}
  \item a type compatible with the effective type of the object,
  \item a qualified version of a type compatible with the effective type of the object,
  \item a type that is the signed or unsigned type corresponding to the effective type of the object,
  \item a type that is the signed or unsigned type corresponding to a qualified version of the effective type of the object,
  \item an aggregate or union type that includes one of the aforementioned types among its members (including, recursively, a member of a subaggregate or contained union), or
  \item a character type.'' (p71)
\end{itemize}

\subsubsection{a type compatible with the effective type of the object}

Valid:

\begin{verbatim}
typedef int my_int;

my_int f(int *pointer)
{
    my_int *my_pointer = pointer;
    return *my_pointer;
}
\end{verbatim}

Undefined behavior:

\begin{verbatim}
int f(long *pointer)
{
    int *my_pointer = (int *)pointer;
    return *my_pointer;
}
\end{verbatim}

\paragraph{Explanation:}
In the context of pointer aliasing, the term \textit{``effective type''} refers to the actual data type that a memory location is being treated as at any given point in the program. Strict aliasing rules in C dictate that you can only safely access a memory location through a pointer that matches the effective type of the data stored at that location.

In the valid example, `my\_int` is a type alias for `int`, and thus, `my\_int *` and `int *` are considered compatible types. This means that the pointer `my\_pointer` is of a type compatible with the effective type of the object `pointer` points to (which is `int`). As a result, accessing the value pointed by `my\_pointer` is well-defined and adheres to the strict aliasing rules.

On the other hand, the undefined behavior example demonstrates a violation of these rules. Here, a `long *` is being forcefully cast to an `int *`. `int` and `long` are distinct types and may have different sizes or representations in memory. According to strict aliasing rules, an object of type `long` must not be accessed through a pointer of type `int *`. This breach can lead the compiler to make optimizations based on the assumption of strict aliasing, potentially resulting in unpredictable behavior at runtime.

\subsubsection{a qualified version of a type compatible with the effective type of the object}

Valid:

\begin{verbatim}
int f(int *pointer)
{
    const int *my_pointer = (const int *)pointer;
    return *my_pointer;
}
\end{verbatim}

\paragraph{Explanation:}
In this valid example, the pointer `pointer` is of type `int *`, and it is cast to `const int *` for `my\_pointer`. This is permissible under the strict aliasing rules as it involves adding a qualifier to the type. 

The type `const int` is considered a qualified version of `int`. The act of adding the `const` qualifier doesn't change the effective type of the object; it simply adds a constraint that prevents modification of the object through the `const`-qualified pointer. In C, it's allowed to access an object through a pointer to a qualified version of the object's effective type. This ensures that the access remains well-defined, and the object's memory representation is correctly interpreted.

However, it's important to note that while you can safely read the value pointed to by `my\_pointer`, attempting to modify it (if `my\_pointer` was not originally `const`) would violate the immutability imposed by the `const` qualifier and lead to undefined behavior.

\subsubsection{a type that is the signed or unsigned type corresponding to the effective type of the object}

Valid:
\begin{verbatim}
unsigned int f(int *pointer)
{
    unsigned int *my_pointer = (unsigned int *)pointer;
    return *my_pointer;
}
\end{verbatim}
\paragraph{Explanation:}
In this example, a pointer of type `int *` is cast to `unsigned int *` and then dereferenced. While `int` and `unsigned int` are both integer types, they represent numbers in different ways: `int` for signed integers and `unsigned int` for unsigned integers. 

According to the strict aliasing rules, it is generally not safe to access an object through a pointer of a different type. However, `int` and `unsigned int` are an exception to this rule. The C standard allows objects to be accessed by pointers of their corresponding signed or unsigned types because the memory representation is the same for both signed and unsigned variants of the same size. This means that the bit pattern in memory is interpreted differently but not modified when accessing an `int` as an `unsigned int` or vice versa.

Nonetheless, this practice should be approached with caution. The reinterpretation of the bit pattern means that the numerical value accessed via `my\_pointer` may differ significantly from the value pointed to by `pointer`. For instance, a negative `int` value, when accessed as an `unsigned int`, will be interpreted as a large positive number. Such behavior is well-defined but can lead to unexpected results if not carefully managed.

\subsubsection{a type that is the signed or unsigned type corresponding to a qualified version of the effective type of the object}

Valid:
\begin{verbatim}
unsigned int f(int *pointer)
{
    const unsigned int *my_pointer = (const unsigned int *)pointer;
    return *my_pointer;
}
\end{verbatim}

\paragraph{Explanation:}
In this example, a pointer of type `int *` is cast to `const unsigned int *` and then dereferenced. As previously discussed, the C standard allows the object to be accessed through a pointer to the corresponding signed or unsigned type, acknowledging that `int` and `unsigned int` have compatible memory representations.

Adding the `const` qualifier to `unsigned int *` to form `const unsigned int *` is also permissible and aligns with the strict aliasing rules. As noted in the earlier example, adding a qualifier like `const` introduces a promise not to modify the object through this pointer, ensuring read-only access. This action does not change the underlying effective type of the object in memory but merely adds a constraint on how the pointer can be used.

Combining these two aspects, this example is valid because it involves accessing an object through a pointer to a qualified version of a type (with `const`) that corresponds to the signed or unsigned type of the effective type of the object (`int` being accessed as `unsigned int`). However, the same caution mentioned previously applies here: the numerical value accessed via `my\_pointer` might be interpreted differently than the value pointed to by `pointer`, due to the difference between signed and unsigned representation.

\subsubsection{an aggregate or union type that includes one of the aforementioned types among its members (including, recursively, a member of a subaggregate or contained union)}

Valid:
\begin{verbatim}
struct vec3d {
    int x, y, z;
};

void vec3d_copy(struct vec3d *dst, struct vec3d *src)
{
    *dst = *src;
}
\end{verbatim}

\paragraph{Explanation:}
This example demonstrates the valid use of an aggregate type, specifically a `struct`, in the context of strict aliasing rules. In C, an aggregate type is a data type that groups multiple individual variables, possibly of different types, into a single unit. In this case, `struct vec3d` is an aggregate type composed of three `int` members: `x`, `y`, and `z`.

The strict aliasing rules permit an object to be accessed through a pointer to an aggregate or union type that includes among its members the type compatible with the effective type of the object. Here, both `src` and `dst` are pointers to `struct vec3d`, and the operation `*dst = *src` involves copying the contents of one `struct vec3d` object to another. This operation is well-defined because it respects the memory layout and type of the aggregate `struct vec3d`.

It's worth noting that aggregate types are treated as a single unit. This means that accessing or modifying a `struct vec3d` object as a whole (as done in this example) is different from accessing or modifying its individual members. This example adheres to the rules by treating `src` and `dst` as pointers to the whole aggregate type, ensuring that the strict aliasing rules are followed.


\subsubsection{a character type}

Valid:

\begin{verbatim}
struct vec3d {
    int x, y, z;
};

void copy(char *dst, char *src, size_t n)
{
    for (size_t i = 0; i < n; i++) {
        dst[i] = src[i];
    }
}

int main()
{
    struct vec3d a = {1, 2, 3};
    struct vec3d b;

    copy((char *)&b, (char *)&a, sizeof(a));

    return 0;
}
\end{verbatim}


\paragraph{Explanation:}
This example illustrates an exception in the strict aliasing rules that allows any object to be accessed through a pointer to a character type. In this case, `char *` is used to access and copy the bytes of a `struct vec3d` object. This is permissible because character types (`char`, `signed char`, `unsigned char`) are specifically allowed to alias any other type.

The function `copy` takes pointers to `char` and copies `n` bytes from the location pointed to by `src` to the location pointed to by `dst`. In the `main` function, the addresses of `struct vec3d` objects `a` and `b` are cast to `char *`, and the `copy` function is used to replicate the memory contents of `a` into `b`. This is a common technique used for generic memory copying in C, often seen in functions like `memcpy`.

This is valid under the C standard because it is an established exception to the strict aliasing rules, acknowledging that character pointers can be used for low-level memory manipulation, allowing them to access the byte representation of any object.

\subsubsection{Strict aliasing violations}

Whenever we cast a pointer type to another pointer type,
it is very likely that we invoke undefined behavior.

\textcolor{red}{Danger!} Probable undefined behavior ahead:

\begin{verbatim}
int *a;
short *b = a;
\end{verbatim}
\subsubsection{Strict aliasing violations (1)}

\begin{verbatim}
uint32_t build_u32(uint16_t a, uint16_t b)
{
    uint32_t r;

    uint16_t *p = &r;

    p[0] = a;
    p[1] = b;

    return r;
}
\end{verbatim}

\paragraph{Explanation:}
This code violates strict aliasing rules by accessing a `uint32\_t` object through a pointer of type `uint16\_t *`. The C standard requires that an object's memory be accessed only through its own type or a compatible type. Here, `uint32\_t` and `uint16\_t` are distinct types with different sizes, and accessing the `uint32\_t` object `r` as if it were an array of `uint16\_t` leads to undefined behavior according to the strict aliasing rules.



\subsubsection{Strict aliasing violations (2)}

This code demonstrates a strict aliasing violation involving different structure types. Although `struct my_data_0`, `struct my_data_1`, and `struct my_data_2` all have a common initial member `subtype`, they are distinct types with different memory layouts. The function `get_first` attempts to access the passed `struct my_data_0 *data` pointer as if it could be `struct my_data_1 *` or `struct my_data_2 *` based on the `subtype`. This violates strict aliasing rules because `struct my_data_1` and `struct my_data_2` are not compatible with `struct my_data_0`, and accessing memory through incompatible types leads to undefined behavior. The C standard does not guarantee that different structure types will have compatible memory layouts, even if they share initial members.

\subsubsection{Strict aliasing violations (3)}

The code snippet involves a `union` named `mux` that allows its memory to be accessed as either an array of `int32_t` (`i`) or `int16_t` (`s`). While unions are designed to provide a way to treat the same memory location in multiple ways, this specific usage may lead to a strict aliasing violation. The code assigns values to the `int32_t` array and then attempts to access these values through the `int16_t` array. According to strict aliasing rules, accessing a memory location as a different type than it was written with (excluding character types) is undefined. However, it's worth noting that some compilers provide extensions or options to allow this kind of access, potentially yielding the intended operations. Nevertheless, this practice is not portable and relies on compiler-specific behavior, which is generally discouraged

\textbf{Note:} Some compilers promise to yield the intended operations here.

\subsubsection{How do I do type-punning then?}

\textit{``Type punning''} is reading the bits of an object as an object of a different type.

\textbf{Valid:}

\begin{verbatim}
int main()
{
    int i[2];
    short s[4];

    i[0] = 0x03020100;
    i[1] = 0x07060504;

    memcpy(s, i, 2 * sizeof(int));

    printf("%d %d %d %d\n", m.s[0], m.s[1], m.s[2], m.s[3]);

    return 0;
}
\end{verbatim}

\paragraph{Explanation:}
The code demonstrates valid type-punning using `memcpy` to safely copy data from an `int` array to a `short` array. This method avoids strict aliasing violations by copying the memory representation without directly accessing the data through pointers of differing types. This approach ensures that the underlying bytes are transferred accurately without invoking undefined behavior, making the operation safe and portable across different compilers and platforms. `memcpy` respects the memory boundaries and types, providing a reliable method for type-punning in compliant C code.


\subsubsection{Why is strict aliasing good for code optimization?}

Strict aliasing rules significantly impact code optimization by providing the compiler with guarantees about memory access patterns. These guarantees enable compilers to perform more aggressive optimizations, resulting in faster and more efficient code. Here's how:

\begin{itemize}
    \item \textbf{Assumption of Independence:} When strict aliasing rules are followed, the compiler assumes that pointers of different types point to non-overlapping memory regions. This assumption allows the compiler to optimize code without having to consider the possibility of one pointer aliasing (or pointing to the same memory location as) another pointer of a different type. As a result, the compiler can generate more streamlined and efficient machine code, as it is free from the burden of inserting additional checks or conservative code paths that account for potential aliasing.

    \item \textbf{Loop Optimizations:} The examples labeled "Fast" demonstrate how adherence to strict aliasing rules enables the compiler to optimize loops more effectively. The compiler can safely assume that the elements being accessed in the loop do not overlap in memory, allowing it to minimize memory loads and stores, and sometimes even vectorize the loop (use SIMD instructions). This results in fewer instructions and a more efficient utilization of the CPU's execution units.

    \item \textbf{Effective Instruction Scheduling:} By understanding the non-overlapping nature of memory accesses, the compiler can schedule instructions in a way that reduces pipeline stalls and improves the overall throughput of the program. This is particularly beneficial in modern processors with deep pipelines and multiple execution units.

\end{itemize}

\subsubsection{And when strict aliasing is not enough?}

When strict aliasing is not enough to guarantee non-overlapping memory regions, particularly in pointer-intensive operations, the \texttt{restrict} keyword can be used as an additional hint to the compiler. This keyword is a promise to the compiler that for the lifetime of the pointer, only the pointer itself or a derivative of it will be used to access the object to which it points. This assurance allows the compiler to make further optimizations by assuming that pointers declared with \texttt{restrict} are not aliased, meaning they do not point to overlapping memory regions.

\begin{itemize}
    \item \textbf{Enhanced Loop Optimizations:} The use of \texttt{restrict} enables the compiler to assume that the arrays \texttt{dst}, \texttt{src}, and \texttt{constant} do not overlap. This allows for more aggressive optimizations in loops, as seen in the "Fast" example. The compiler can optimize memory access patterns and instruction scheduling, resulting in more efficient code execution.
    
    \item \textbf{Improved Parallelism:} Knowing that the data does not overlap allows the compiler to avoid conservative assumptions about data dependencies. This can lead to improved parallel execution, both at the instruction level (such as pipelining and instruction-level parallelism) and at higher levels (such as loop unrolling and vectorization).
    
    \item \textbf{Better Resource Utilization:} With clearer assumptions about memory usage, the compiler can make more informed decisions about register allocation, instruction selection, and other optimizations that contribute to better utilization of the CPU and memory hierarchy.
\end{itemize}

\subsection{More types of undefined behavior}

\subsubsection{Unaligned pointers}

Every type has a required alignment (which we can query with \texttt{alignof(type)}). (see p44)

Every pointer to that type must be a multiple of that alignment. 

Undefined behavior:

\begin{verbatim}
int *alloc_5_bytes()
{
    char *c = malloc(1 + sizeof(int));
    return c + 1;
}
\end{verbatim}

\subsubsection{Out-of-bounds pointer arithmetic}

“When two pointers are (added or) subtracted, 
both shall point to elements of the same array object, 
or one past the last element of the array object;” (p84)

Undefined behavior:

\begin{verbatim}
size_t eight()
{
    char c[4];
    return &(c[8]) - &(c[0]);
}
\end{verbatim}

\subsubsection{Infinite loops}

An infinite loop with no side effects is undefined behavior.

Undefined behavior:

\begin{verbatim}
while (1)
{
}
\end{verbatim}

Valid:

\begin{verbatim}
while (1)
{
    printf("Hello\n");
}
\end{verbatim}

\subsubsection{Shift beyond integer size}

Undefined behavior:

\begin{itemize}
    \item left/right shift integer by a negative number
    \begin{verbatim}
        uint32_t a = 1 >> -5;
    \end{verbatim}

    \item left/right shift an \textit{n}-bit integer by \textit{n} or more positions
    \begin{verbatim}
        uint32_t a = 1;
        uint32_t b = a << 32;
    \end{verbatim}

    \item left shift signed integer \textit{i} by \textit{k} positions and \textit{i} $ \times 2^{k} $ is not representable
    \begin{verbatim}
        uint32_t a = -1024;
        uint32_t b = a << 30;
    \end{verbatim}
\end{itemize}
C23 pp584--594: 218 types of undefined behavior