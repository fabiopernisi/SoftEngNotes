\newpage
\section{Instructions and Memory}

\subsection{Integers (Continued)}

\subsubsection*{Two's complement:}
\begin{itemize}
    \item Given a single \textit{n}-bit pattern,
    \begin{itemize}
        \item let \textit{u} be its unsigned value
        \item let \textit{s} be its signed value,
    \end{itemize}
    \item If bit $(n - 1) = 0$, then:
    \begin{itemize}
        \item $s := u$
    \end{itemize}
    \item If bit $(n - 1) = 1$, then:
    \begin{itemize}
        \item $s := u - 2^n$
    \end{itemize}
\end{itemize}
\paragraph{4-bit example:}

\begin{itemize}
    \item bit $(n - 1) = 0 \Rightarrow s = u$
    \item bit $(n - 1) = 1 \Rightarrow s = u - 2^n$
\end{itemize}

\paragraph{In general:}

\begin{tabular}{c|c|c|c|c}
    \textbf{bit pattern} & \textbf{00 \ldots 0} & \textbf{01 \ldots 1} & \textbf{10 \ldots 0} & \textbf{11 \ldots 1} \\
    \hline
    \textbf{unsigned $u$} & 0 & $(2^{n-1}) - 1$ & $(2^{n-1})$ & $(2^{n}) - 1$ \\
    \textbf{signed $s$} & 0 & $(2^{n-1}) - 1$ & $-(2^{n-1})$ & $-1$
\end{tabular}

\begin{itemize}
    \item Unsigned: $u \in \{0, \ldots, (2^n) - 1\}$
    \item Signed: $s \in \{-(2^{n-1}), \ldots, -1, 0, \ldots (2^{n-1}) - 1\}$
\end{itemize}
\paragraph{Conversely:}

\begin{itemize}
    \item if $s \geq 0$
    \begin{itemize}
        \item represent with bit pattern of $u = s$.
    \end{itemize}
    \item if $s < 0$
    \begin{itemize}
        \item represent with bit pattern of $u = 2^n - |s|$.
    \end{itemize}
    \item if $s \notin \{-(2^{n-1}), \ldots, (2^{n-1}) - 1\}$
    \begin{itemize}
        \item cannot represent, need larger $n$
    \end{itemize}
\end{itemize}

\subsubsection{Sign extension}

Let us represent \( s = -5 \) in n-bit signed binary (two's complement):

\( u = 2^n - \left| s \right| = 2^n - 5 \)

\begin{center}
\begin{tabular}{cccc}
n & s & u & bit pattern \\
\hline
4 & -5 & 11 & 1011 \\
5 & -5 & 27 & 11011 \\
6 & -5 & 59 & 111011 \\
7 & -5 & 123 & 1111011 \\
8 & -5 & 251 & 11111011 \\
9 & -5 & 507 & 111111011 \\
10 & -5 & 1019 & 1111111011 \\
11 & -5 & 2043 & 11111111011 \\
12 & -5 & 4091 & 111111111011 \\
\end{tabular}
\end{center}

\subsubsection{Increasing the number of bits}

To convert an n-bit number to an \( (n + k) \)-bit number (\( k \geq 0 \)):

\begin{itemize}
\item Unsigned:
\begin{itemize}
\item Additional high-order (leftmost) bits are set to zero
\end{itemize}
\item Signed (``sign extension''):
\begin{itemize}
\item Additional high-order (leftmost) bits are set to the value of bit \( (n - 1) \)
\end{itemize}
\end{itemize}
\subsubsection{Base 16}

Hexadecimal digits: \( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f \)

\begin{itemize}
    \item Pros:
    \begin{itemize}
        \item Directly maps to binary numbers:
        \begin{itemize}
            \item hex 12f3 = binary 0001 0010 1111 0011
        \end{itemize}
        \item More compact than binary
        \item Directly maps to bytes:
        \begin{itemize}
            \item two hex digits = one byte
        \end{itemize}
    \end{itemize}
    \item Cons:
    \begin{itemize}
        \item Not human-friendly (esp. for arithmetic)
    \end{itemize}
\end{itemize}
\subsection{Characters and Text}

How do we map bit patterns to characters in order to form text?

\begin{itemize}
    \item Many standards
    \item Some similarities
    \item Some incompatibilities
\end{itemize}

\subsubsection{ASCII (1963-)}
\begin{itemize}
    \item American Standard Code for Information Interchange
    \item Each character stored stored in 1 byte (8 bits, 256 possible characters)
    \item 128 standardized characters
    \item Many derivatives specify the remaining 128
\end{itemize}
[TBD] % This is a placeholder for the ASCII table image

\subsubsection{Unicode (1988-)}
\begin{itemize}
    \item Associates ``code points'' (roughly, characters) to integers
    \item Up to 1,112,064 code points (currently 149,186 assigned)
    \item First 128 code points coincide with ASCII
    \item Multiple possible encodings into bytes (``transmission formats''):
    \begin{itemize}
        \item UTF-8
        \begin{itemize}
            \item First 128 code points encoded into a single byte (backward compatible with ASCII)
            \item Sets most significant bit (bit 7) to 1 to signify ``more bytes needed''
            \item Up to 4 bytes per code point
            \item Default on BSD, iOS/MacOS, Android/Linux and on most internet communications
        \end{itemize}
        \item UTF-16
        \begin{itemize}
            \item Code points are encoded by either two or four bytes
            \item Default on Windows, for Java code, and for SMS
        \end{itemize}
    \end{itemize}
\end{itemize}

\subsubsection{Unicode (1988-)}
\begin{itemize}
    \item Aims at encoding all languages:
    \begin{itemize}
        \item including extinct ones
        \item left-to-right, right-to-left or vertical
        \item and more (emojis)
    \end{itemize}
    \item Some ``characters'' require multiple code points (flag emojis, skin tone modifiers)
    \item What is even a ``character''? (code point, glyph, grapheme, cluster)
    \item Unicode is extremely complicated
    \item Latest version (v15.0.0, 2022) specification is 1,060 pages
\end{itemize}
\subsection{Hardware}

Logic gates allow us to compute Boolean functions ``instantly'' (subject to physical limits).

But we need many logic gates, even for simple things (like 64-bit integer division).

$\rightarrow$ We break down complex algorithms into simple steps.

\subsubsection{Components in a Computer}
\begin{itemize}
    \item Logic gates
    \item A clock
    \item Memory
    \item Input and output devices
\end{itemize}
\subsubsection{A first abstraction}

\begin{itemize}
  \item Memory is $N$ bits $\in \{0, 1\}^N$ (e.g., for 16 GB, $N \approx 128 \cdot 10^9$)
  \item At every clock cycle (e.g., 1.2 GHz), we update the memory:
  \[
  x_i' \leftarrow f_i(\mathbf{x}) \quad \forall i = 0, \ldots, N
  \]
  \item Some of the memory comes from input devices
  \item Some of the memory is sent to output devices
\end{itemize}

\subsubsection{A more realistic model}

\begin{itemize}
  \item We cannot update the whole memory at every clock cycle
  \begin{itemize}
    \item That would be $128 \times 10^9 \times 1.2 \times 10^9 = 153.6 \times 10^{18}$ B/s
    \item $\approx 153,600,000,000$ GB/s
  \end{itemize}
  \item As of 2023, memory maxes out at $\approx 800$ GB/s
  \item Instead, at each cycle, we only read/write a tiny amount of memory
  \item We cannot have too many different Boolean function $f_i$
  \begin{itemize}
    \item Instead, at each cycle, the computer executes one of a limited set of \textbf{instructions} in a \textbf{processor} (a.k.a. \textsl{"Central Processing Unit", CPU}), e.g.
    \begin{itemize}
      \item no memory read / write
      \item 64-bit arithmetic (+, -, $\times$, \ldots)
      \item comparison ($<$, $>$, $=$, \ldots)
      \item branch (if, while, \ldots)
    \end{itemize}
  \end{itemize}
\end{itemize}

\subsection{Instruction Set Architectures (ISA)}
\subsubsection{An ISA specifies:}
\begin{itemize}
    \item How the machine is organized (memory, etc.)
    \item What instructions are available
    \item How instructions are encoded into bits
\end{itemize}

\subsubsection{Two major ISAs in practice:}
\begin{itemize}
    \item \textbf{x86\_64} (a.k.a. x64, x86\_64, AMD64): Intel\textsuperscript{\textregistered} and AMD\textsuperscript{\textregistered} 64-bit CPUs
    \item \textbf{AArch64} (a.k.a. ARM64): ARM\textsuperscript{\textregistered}-based 64-bits CPUs (phones, Apple M1 \& M2)
\end{itemize}

Many older and less prominent ISAs:
\begin{itemize}
    \item x86, Itanium, ARMv7, RISC-V, PowerPC, \ldots
\end{itemize}

\paragraph{Code Example and Assembly Representation}
\texttt{ int f(int a, int b, int c)}
\begin{verbatim}
{
    return (a * b) / c;
}
\end{verbatim}

\subsubsection*{x86\_64:}
\begin{minipage}[t]{0.5\textwidth}
\begin{verbatim}
89 f8 89 d1 0f af c6 99 f7 f9 c3
\end{verbatim}
f:
\begin{verbatim}
    mov eax, edi     # 89 f8
    mov ecx, edx     # 89 d1
    imul eax, esi    # 0f af c6
    cdq              # 99
    idiv ecx         # f7 f9
    ret              # c3
\end{verbatim}
\end{minipage}
\hspace{0.5cm}
\subsubsection*{AArch64:}
\begin{minipage}[t]{0.5\textwidth}
\begin{verbatim}
1b 01 7c 00 1a c2 0c 00 d6 5f 03 c0
\end{verbatim}
f:
\begin{verbatim}
    mul w0, w0, w1  # 1b 01 7c 00
    sdiv w0, w0, w2 # 1a c2 0c 00
    ret             # d6 5f 03 c0
\end{verbatim}
\end{minipage}
\subsubsection{Assembly}
\begin{itemize}
    \item Assembly is the lowest-level programming language
    \item Assembly is in 1:1 correspondence with binary encoding of instructions
    \item Typically, one line per instruction
\end{itemize}
\subsubsection{Instructions (x86\_64)}

\begin{verbatim}
f:
 mov eax, edi       # 89 f8
 mov ecx, edx       # 89 d1
 imul eax, esi      # 0f af c6
 cdq                # 99
 idiv ecx           # f7 f9
 ret                # c3
\end{verbatim}

\begin{itemize}
  \item \textbf{mov a, b} \qquad move \hfill $a \gets b$
  \item \textbf{imul a, b} \qquad signed integer multiply \hfill $a \gets a \times b$
  \item \textbf{idiv a} \qquad signed integer divide \hfill $eax \gets eax / a$
  \item \textbf{cdq} \qquad convert double-word (32 bits) to quad-word (64 bits) \hfill sign-extend $eax$ into $edx:eax$
  \item \textbf{ret} \qquad return \hfill return to calling function
\end{itemize}

\subsubsection{Instructions (AArch64)}

\begin{verbatim}
f:
 mul w0, w0, w1     # 1b 01 7c 00
 sdiv w0, w0, w2    # 1a c2 0c 00
 ret                # d6 5f 03 c0
\end{verbatim}

\begin{itemize}
  \item \textbf{mul a, b, c} \qquad multiply \hfill $a \gets b \times c$
  \item \textbf{sdiv a, b, c} \qquad signed integer divide \hfill $a \gets b / c$
  \item \textbf{ret} \qquad return \hfill return to calling function
\end{itemize}

\subsubsection{Registers}

\paragraph{x86\_64:}
\begin{verbatim}
f:
 mov eax, edi       # 89 f8
 mov ecx, edx       # 89 d1
 imul eax, esi      # 0f af c6
 cdq                # 99
 idiv ecx           # f7 f9
 ret                # c3
\end{verbatim}


\paragraph{AArch64:}
\begin{verbatim}
f:
 mul w0, w0, w1     # 1b 01 7c 00
 sdiv w0, w0, w2    # 1a c2 0c 00
 ret                # d6 5f 03 c0
\end{verbatim}

\begin{itemize}
  \item small, fixed set of variables that can be accessed instantly
  \item 16 (x86\_64) or 31 (AArch64) general-purpose 64-bit registers
  \item special registers and flags (not accessible directly)
  \item larger registers for extended operations (e.g., non-integer numbers)
\end{itemize}
\subsubsection{Registers (x86\_64)}

\begin{itemize}
    \item sixteen 64-bit registers:
    \begin{verbatim}
    rax, rbx, rcx, rdx, rsp, rbp, rsi, rdi,
    r8, r9, r10, r11, r12, r13, r14, r15
    \end{verbatim}
    
    \item we can access the lower 32 bits separately:
    \begin{verbatim}
    eax, ebx, ecx, edx, esp, ebp, esi, edi,
    r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d
    \end{verbatim}
    
    \item we can access the lower 16 bits separately:
    \begin{verbatim}
    ax, bx, cx, dx, bp, sp, si, di,
    r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w
    \end{verbatim}
    
    \item we can access the lower 8 bits separately:
    \begin{verbatim}
    al, bl, cl, dl, bpl, spl, sil, dil,
    r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b
    \end{verbatim}
    
    \item we can access bits 8-15 separately for some registers:
    \begin{verbatim}
    ah, bh, ch, dh
    \end{verbatim}
\end{itemize}

\paragraph{Example:}
\begin{tabular}{|c|c|c|c|c|c|c|c|c|}
\hline
\textbf{bits} & \textbf{63..56} & \textbf{55..48} & \textbf{47..40} & \textbf{39..32} & \textbf{31..24} & \textbf{23..16} & \textbf{15..8} & \textbf{7..0} \\
\hline
64 & \multicolumn{8}{c|}{rax} \\
\hline
32 & \multicolumn{4}{c|}{} & \multicolumn{4}{c|}{eax} \\
\hline
16 &  &  &  &  &  & & \multicolumn{2}{c|}{ax} \\
\hline
8 &  &  &  &  &  &  & ah & al \\
\hline
\end{tabular}
\subsubsection{Registers (AArch64)}

\begin{itemize}
    \item thirty-one 64-bit registers:
    \begin{verbatim}
    x0, ..., x30
    \end{verbatim}
    
    \item we can access the lower 32 bits separately:
    \begin{verbatim}
    w0, ..., w30
    \end{verbatim}
    
    \item register 31 (\texttt{x31}, \texttt{w31}) is read-only (zero in most cases)
\end{itemize}

\paragraph{Example:}
\begin{tabular}{|c|c|c|c|c|c|c|c|c|}
\hline
\textbf{bits} & 63...56 & 55...48 & 47...40 & 39...32 & 31...24 & 23...16 & 15...8 & 7...0 \\
\hline
64 &  \multicolumn{8}{|c|}{\textbf{x0}} \\
\hline
32 &  &  &  &  & \multicolumn{4}{|c|}{\textbf{w0}} \\
\hline
\end{tabular}
\subsection{Memory}
\begin{verbatim}
int g(int *a, int *b)
{
    return *a + *b;
}
\end{verbatim}

\paragraph{x86\_64:}
\begin{verbatim}
g:
  mov eax, DWORD PTR [rsi]
  add eax, DWORD PTR [rdi]
  ret
\end{verbatim}

\paragraph{AArch64:}
\begin{verbatim}
g:
  ldr w0, [x0]
  ldr w1, [x1]
  add w0, w2, w0
  ret
\end{verbatim}

\subsubsection{Memory}

\begin{itemize}
    \item From a process' perspective, memory is seen as a single long array of \textbf{bytes} (8 bits)
    \item Like registers, memory can be accessed in larger chunks (16, 32 or 64 bits)
    \item But the smallest addressable unit is the byte
\end{itemize}

\subsubsection{Byte ordering}
\begin{tabular}{c c c c c c c c c c c c c}
    \hline
    address & 0 & 1 & 2 & ... & 239 & 240 & 241 & 242 & 243 & 244 & ... \\
    \hline
    value (hex) & ef & cd & ab & 89 & ... & ff & a0 & a1 & a2 & a3 & 42 & ... \\
    \hline
\end{tabular}

\begin{itemize}
    \item the byte at address 240 is (hex) \textbf{a0} = (decimal) 160
    \item the byte at address 241 is (hex) \textbf{a1} = (decimal) 161
    \item the byte at address 242 is (hex) \textbf{a2} = (decimal) 162
    \item the byte at address 243 is (hex) \textbf{a3} = (decimal) 163
\end{itemize}

Q: What is the value of the 32-bit integer at address 240?

A: It depends!

\subsubsection{Byte ordering / "Endianness"}
\begin{tabular}{c c c c c c c c c c c c c}
\hline
address & 0 & 1 & 2 & 3 & ... & \textbf{239} & \textbf{240} & \textbf{241} & \textbf{242} & \textbf{243} & 244 & ... \\
\hline
value (hex) & ef & cd & ab & 89 & ... & ff & \textbf{a0} & \textbf{a1} & \textbf{a2} & \textbf{a3} & 42 & ... \\
\hline
\end{tabular}


\begin{itemize}
    \item "big-endian" (BE): 32-bit int at 240 is (hex) \textbf{a0 a1 a2 a3}
    \begin{itemize}
        \item = (decimal) $160 \times 2^{24} + 161 \times 2^{16} + 162 \times 2^{8} + 163$
        \item = (decimal) 2,694,947,491
    \end{itemize}
    \item "little-endian" (LE): 32-bit int at 240 is (hex) \textbf{a3 a2 a1 a0}
    \begin{itemize}
        \item = (decimal) $163 \times 2^{24} + 162 \times 2^{16} + 161 \times 2^{8} + 160$
        \item = (decimal) 2,745,344,416
    \end{itemize}
\end{itemize}

\begin{itemize}
    \item \texttt{x86\_64} is LE
    \item \texttt{AArch64} is LE by default (LE-only on Windows, MacOS, Linux)
\end{itemize}
\subsubsection{Bit ordering}

Because we cannot access individual bits on a CPU (smallest chunk is a byte), 
bit ordering does not matter here.

However the same problem crops up in other contexts (USB, Ethernet, Wifi, \ldots)

\subsubsection{Memory access notation}

\begin{itemize}
\item In assembly, accessing memory is denoted using ``\texttt{[}'' and ``\texttt{]}''
\begin{itemize}
\item Moving the value 240 into a register:
\begin{verbatim}
mov eax, 240   # eax = 240
ldr w0, 240    # w0 = 240
\end{verbatim}

\item Moving the 4 bytes of memory at address 240 into a register:
\begin{verbatim}
mov eax, DWORD PTR [240]   # eax = (hex) a3a2a1a0
ldr w0, [240]              # w0 = (hex) a3a2a1a0
\end{verbatim}
\end{itemize}
\end{itemize}