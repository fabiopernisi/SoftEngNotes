


% Use the 'article' or 'report' class for a simple document format

% No need for special packages as the text is straightforward

\section*{LECTURE 8}

\subsection*{REGULAR EXPRESSIONS}

\subsection*{Definition}
Regular expressions are a mini-language for text pattern matching.

% [TBD] is a placeholder for the part of the image that cannot be represented in text (images or non-textual elements)



% Slide 1: Example
\subsection*{Example}

\textbf{Q}: Find all occurrences of the word ``memory'' in the files in this directory.

\begin{verbatim}
grep 'memory' *
\end{verbatim}

% Slide 2: MATCHING
\subsection*{MATCHING}

% Slide 3: The grep command
\subsection*{The grep command}

\begin{verbatim}
grep [OPTION...] PATTERNS [FILE...]
\end{verbatim}

\subsubsection*{Options:}
\begin{itemize}
    \item \texttt{-E}: ``extended'' regular expressions (we will use this syntax)
    \item \texttt{-R}: recursive (if a directory is given, look all files in it, incl. subdirectories)
    \item \texttt{-i}: case insensitive (a same as A)
\end{itemize}

\subsubsection*{Patterns:}
Use single-quotes (\texttt{' '}) to avoid shell interference

\subsubsection*{Files:}
if no file provided, grep reads its (piped) input


% LaTeX transcription of the lecture material

\subsection*{Piping to grep}

Q: Find all files in the current directory whose name contains the letter L

\begin{verbatim}
ls | grep -E -i 'L'
\end{verbatim}

\subsection*{Introduction to regular expressions}

\begin{itemize}
  \item by default, patterns are looked for line-by-line
  \item strings of “normal” characters are matched
\end{itemize}

\begin{verbatim}
grep -E 'memory' *
\end{verbatim}

\subsection*{Anchors}

\begin{itemize}
  \item the \^{} character at the beginning of a regex matches the beginning of a line
  \item the \$ character at the end of a regex matches the end of a line
\end{itemize}

Examples:

\begin{verbatim}
grep -E '^int' *
grep -E 's$' *
\end{verbatim}

% Note to the user: The document is ready to be compiled in LaTeX.
% Code verbatim blocks are used to represent terminal commands.
% Special characters such as the caret (^) and the dollar sign ($)
% are escaped with a backslash within the text to prevent LaTeX
% from interpreting them as commands.


% Preamble or specific document class commands are omitted as requested.
% Begin the main content here:

\subsection*{Repetitions}

\begin{itemize}
    \item \texttt{?} indicates that the previous character may or may not occur (once)
    \item \texttt{*} indicates that the previous character may occur zero or multiple times
    \item \texttt{+} indicates that the previous character may occur one or more times
    \item \texttt{\{4\}} indicates that the previous character must occur 4 times
    \item \texttt{\{4,\}} indicates that the previous character must occur 4 or more times
    \item \texttt{\{4,8\}} indicates that the previous character must occur between 4 and 8 times
\end{itemize}

\noindent Examples:

\begin{verbatim}
grep -E 's?printf' *
grep -E '^ *printf' *
grep -E '0b+0' *
grep -E 'e{2,}' *
\end{verbatim}

\subsection*{Grouping}

Any part of a regex can be grouped using parentheses.
Repetitions then apply to the group instead of a single character.

\noindent Examples:

\begin{verbatim}
grep -E '(Abc)+'    # matches 'Abc', 'AbcAbc', 'AbcAbcAbc', ...
\end{verbatim}

\subsection*{Match any character}

The dot (\texttt{.}) matches any character:

\noindent Examples:

\begin{verbatim}
grep -E 'X.Y'   # matches 'XaY', 'XbY', 'X+Y', ...
grep -E 'X.*y'  # matches 'XabcY', 'X-*-y', ...
\end{verbatim}

% End of the main content.
% Note that a real LaTeX document would require a preamble with a document class


% Since this is a content transcription into LaTeX, we do not include document preamble, begin, or end commands.
% The content is transcribed as is, and can be inserted into a LaTeX document as needed.

\subsection*{Bracket expressions}

\begin{itemize}
    \item One character can be matched to multiple options using square brackets:
    \begin{verbatim}
    grep -E '[abc]XY'  # matches aXY or bXY or cXY
    grep -E '[01]+'    # matches binary numbers
    \end{verbatim}

    \item We can express ranges of characters using a dash:
    \begin{verbatim}
    grep -E '[0123456789]+'     # matches decimal numbers
    grep -E '[0-9]+'            # equivalent
    grep -E '[0-9a-fA-F]+'      # matches hexadecimal numbers
    grep -E '[A-Z][a-z]*'       # matches words that start with a capital letter
    \end{verbatim}

    \item Bracket expressions are negated if the first character is \textasciicircum:
    \begin{verbatim}
    grep -E '[^A]sprintf'      # matches "printf", "sprintf" ... but not "sprintf"
    \end{verbatim}
\end{itemize}

\subsection*{Disjunctions}

Multiple options can be given using the ``|'' character:

\begin{verbatim}
grep -E 'system_(startup|shutdown)'  # matches "system_startup" or "system_shutdown"
\end{verbatim}

\subsection*{Special characters}

Special characters can be “escaped” using a backslash (“\textbackslash”):

\begin{verbatim}
grep -E 'printf\(.*\)'  # matches "printf("Hello %s", name)"
\end{verbatim}

% The [TBD] token is used to indicate that images or non-textual elements that cannot be represented in LaTeX are present.
% But since this is purely text transcription, the token is not used.


% Since the LaTeX content requested does not require preamble or document start commands,
% we will directly start with the transcription of the provided slide content.

\subsection*{Using regular expressions in less}

Searching for patterns in the \texttt{less} pager is performed by typing ``/''. 

Patterns are specified using regular expressions

\subsection*{SEARCH AND REPLACE: \texttt{sed}}

\texttt{sed [OPTION...] SCRIPT [FILE...]}

\begin{itemize}
    \item Options:
    \begin{itemize}
        \item \texttt{-E}: ``extended'' regular expressions (we will use this syntax)
        \item \texttt{-i}: edit file in-place (instead of printing)
    \end{itemize}
    \item Script: Use single-quotes (\texttt{` ' `}) to avoid shell interference
    \item Files: if no file provided, \texttt{sed} reads its (piped) input
\end{itemize}

% [TBD] token placeholder for the non-textual elements in the slides not represented here.
% Note that actual LaTeX code for creating lists and sections has been used.
% The command \texttt is used for displaying text in teletype (monospace) font.


\subsection*{Basic search and replace}

\begin{verbatim}
sed -E 's/REGEX/REPLACEMENT/'
\end{verbatim}

\begin{itemize}
  \item Examples:
  \begin{verbatim}
  sed -E 's/python/Python/'    # replace "python" with "Python"
  sed -E 's/printf\(/\fprintf\(stderr, /' # replace "printf(" with "fprintf(stderr, "
  \end{verbatim}
  
  \item Allow multiple replacements per line:
  \begin{verbatim}
  sed -E 's/REGEX/REPLACEMENT/g'   # g stands for global
  \end{verbatim}
  
  \item Use delimiter different from ``/'':
  \begin{verbatim}
  sed -E 's|REGEX|REPLACEMENT|'
  sed -E 's_REGEX_REPLACEMENT_'
  \end{verbatim}
\end{itemize}

\subsection*{Advanced search and replace}

\begin{itemize}
  \item In the replacement string, \textbackslash1 indicate the first parenthesized group, \textbackslash2 the second, etc.:
  \begin{verbatim}
  # replace "Hello, World!" with "Bye, World!"
  sed -E 's/Hello, ([A-Za-z]*\!)/Bye, \1!/'
  \end{verbatim}
  
  \item Groups are numbered in the order of the opening parentheses from the left:
  \begin{verbatim}
  sed -E 's/((a(b|z)+)(c+))/\1\3/g'
  #         ^  ^    ^  ^
  #         1  2    3  4
  \end{verbatim}
\end{itemize}

% The final slide title "REGULAR EXPRESSIONS IN PROGRAMMING LANGUAGES" is present as well, but not as a section in the LaTeX transcription, as it seems to be the title for the next slide or section.
% There is no content associated with this title in the given image.

% End LaTeX code


% This is a LaTeX transcription of the provided code snippets related to regular expressions in C and Python.
% Note that the transcription is suitable for compilation as part of a LaTeX document,
% but it does not include preamble, document environment, or specific packages required for formatting code.
% Use the `listings` package or other appropriate packages to properly format and highlight the code.

\subsection*{Using regular expressions in C}

% Starts a code block. Adjust based on the LaTeX packages you are using, for example, listings.
\begin{verbatim}
#include <stdio.h>
#include <regex.h>

int main()
{
    regex_t re;
    
    // REG_EXTENDED: POSIX extended regular expression
    // REG_NOSUB: do not report position of matches
    if (regcomp(&re, "0[xX][0-9a-fA-F]+", REG_EXTENDED | REG_NOSUB)) {
        fprintf(stderr, "Failed to compile regex\n");
        return 1;
    }

    int r = regexec(&re, "Does this contain a hex number, like 0xff ?", 0, NULL, 0);

    if (r == 0) {
        printf("Found\n");
    } else if (r == REG_NOMATCH) {
        printf("Not found\n");
    }
    
    regfree(&re);

    return 0;
}
\end{verbatim}
See: \texttt{man regex}

\subsection*{Using regular expressions in Python}

% Starts a code block. Adjust based on the LaTeX packages you are using, for example, listings.
\begin{verbatim}
>>> import re
>>> m = re.search(r'0[xX][0-9a-fA-F]+', 'Does this contain a hex number, like 0xff ?')
>>> m.group(0)
'0xff'
\end{verbatim}

\textgreater{} \href{https://docs.python.org/3/library/re.html}{documentation}
% The URL above should be replaced with the actual link to the Python documentation on regular expressions.

% End of the transcription.
