


% Slide Title
\section{Lecture 11}

\subsection{Part 3: Correctness}

% Content Section "We are here"
\subsection{We are here}
\begin{itemize}
    \item Part 1: How computers works
    \begin{itemize}
        \item Boolean logic, integers
        \item Instructions
        \item Memory
    \end{itemize}

    \item Part 2: Software development
    \begin{itemize}
        \item Compiling, make
        \item ABIs \& APIs
        \item git
    \end{itemize}

    \item Part 3: Correctness
    \begin{itemize}
        \item Specifications $\leftarrow$ TODAY
        \item Documentation, testing
        \item Static \& dynamic analysis
    \end{itemize}

    \item Part 4: Performance
    \begin{itemize}
        \item CPU pipelines, caches
        \item Data structures
        \item Parallel computation
    \end{itemize}
\end{itemize}


% Here begins the LaTeX transcription of the lecture material

\subsection{A note about C}

\subsection{Why C?}
\begin{itemize}
    \item The C language has deep flaws
    \item but the C ABI is everywhere:
    \begin{itemize}
        \item CPU and OS vendors define the ABI for C function calls
        \item OS services are typically provided via C functions:
        \begin{itemize}
            \item Win32 and WinRT (even though WinRT is C++)
            \item MacOS's Cocoa uses the Objective-C ABI (a superset of the C ABI)
            \item Linux kernel ABI
        \end{itemize}
        \item almost all other languages support calling into C code
    \end{itemize}
\end{itemize}

\subsection{Why the C ABI?}
The C ABI is simple:
\begin{itemize}
    \item just functions and simple types: integer, pointer, \texttt{struct}
    \item no objects or methods:
    \begin{itemize}
        \item What names do we give the symbols for the following?
        \begin{verbatim}
MyClass::myFunction(int type);
MyClass::myFunction(OtherClass &c);
        \end{verbatim}
        \item This?
        \begin{verbatim}
MyClass_method_int_myFunction
MyClass_method_OtherClass_ref_myFunction
        \end{verbatim}
        \item How do we call them? Like this?
        \begin{verbatim}
MyClass_method_int_myFunction(MyClass *self, int type);
MyClass_method_OtherClass_ref_myFunction(MyClass *self, OtherClass *c);
        \end{verbatim}
    \end{itemize}
    \item no exceptions
\end{itemize}
% End of the LaTeX transcription of the lecture material


% LaTeX transcription of the lecture's text content

\subsection{Other ABIs}

\begin{itemize}
    \item There are multiple C++ ABI specifications
    \begin{itemize}
        \item but they change over time (no ``stable'' ABI)
        \item even across versions of the same compiler
    \end{itemize}
    \item There is no Rust ABI specification
\end{itemize}

% The slide is separated by page breaks or sections, here's the next section
\subsection{Specifications}

% And another section break or page break
\subsection{What is even the C language?}

% Notes for each section have been separated by sections, assuming they are on different slides.
% [TBD] token replaces images or non-textual elements that cannot be represented in LaTeX.


% We'll use the 'verbatim' environment for code blocks
\begin{verbatim}
bool is_zero(int j)
{
    return i == 0;
}
\end{verbatim}

\begin{verbatim}
clang -03 -c -o is_zero.o is_zero.c
\end{verbatim}

\begin{verbatim}
is_zero.c:1:1: error: unknown type name 'bool'
bool is_zero(int j)
\end{verbatim}

% We represent the Google search result with text, as the image is not to be included
\texttt{'bool' was added to the C language in 2023.}

\begin{verbatim}
bool is_zero(int j)
{
    return i == 0;
}

clang -03 -c -std=c2x -o is_zero.o is_zero.c
\end{verbatim}

% The word "Works!" points out the successful result. This comment should suffice.
% Works!


% LaTeX transcription of the lecture material
%
\subsection{Questions}
\begin{itemize}
    \item What is (and is not) valid C?
    \item Who defines the C language?
    \item What does \texttt{-std=c2x} mean?
\end{itemize}

% Slide break - LaTeX does not support 'slide' concept outside of presentations classes like Beamer,
% but the content is continued as a separate section for clarity

% "What is valid C?" slide
\subsection{What is valid C?}
\begin{itemize}
    \item Pragmatically, C code is valid if your compiler produces a valid executable.
    \item However, there are many compilers.
    \item It would be convenient if they agreed on a definition for the C language.
\end{itemize}

% Image placeholder
% Since the inclusion of actual images is not allowed and \includegraphics should not be used,
% a placeholder for the image will be provided with the comment 'TBD'.
% The image refers to the cover of "The C Programming Language, Second Edition" by Brian W. Kernighan and Dennis M. Ritchie

[TBD] % Replace this token with the proper LaTeX command to include an image, if needed.

\textit{In the beginning, there was K\&R C (1978)}

\begin{itemize}
    \item 1978: Kernighan and Ritchie publish their book
    \item 1983: The American National Standards Institute (ANSI) forms a committee to standardize C
    \item 1989: The committee publishes the standard, ``ANSI C'' / ``C89''
    \item 1990: The International Organization for Standardization (ISO) adopts the standard
    \item 1999: ISO updates the standard (ANSI adopts it): ``C99''
    \item 2011: ISO update: ``C11''
    \item 2017: ISO update: ``C17''
    \item 2023: ISO working on update ``C23'', provisionally ``C2x''
\end{itemize}

Hence \verb|-std=c2x|

\subsection{Who defines the C language nowadays?}

\begin{itemize}
    \item A ``working group'' within ISO: ``WG14''
    \begin{itemize}
        \item Compiler writers
        \item Hardware vendor representatives
        \item OS maintainers
        \item Academics
    \end{itemize}
    \item \textgreater{} C23 draft (742 pages)
\end{itemize}

\subsection{Behaviours}

[TBD] % Replace this with the content that is applicable or an explanation of the non-textual element, as this indicates a non-textual part of the slide.



% Note: Package imports and document preamble are not included as they are not part of the lecture content.

\subsection{Locale-Specific Behavior}

Behavior that depends on local conventions (nationality, culture, and language) that each implementation documents.

\paragraph{Example}

Whether \texttt{islower()} returns true for characters other than the 26 lowercase Latin letters.

\begin{verbatim}
int a = islower('Ã¦');
\end{verbatim}

\subsection{Unspecified Behavior}

\begin{itemize}
  \item Behavior upon which this document provides two or more possibilities and imposes no further requirements on which is chosen in any instance
  \item Behavior that results from the use of an unspecified value
\end{itemize}

\paragraph{Examples}

\begin{itemize}
  \item The order in which the arguments to a function are evaluated.
  \item Value of padding bytes:
\end{itemize}

\begin{verbatim}
struct s {
    char a; // 1 byte
    // 3 padding bytes
    int b;  // 4 bytes
};
\end{verbatim}

\subsection{Implementation-defined Behavior}

Unspecified behavior where each implementation (compiler / platform / OS) documents how the choice is made

\paragraph{Example}

The propagation of the high-order bit when a signed integer is shifted right.

\begin{verbatim}
int a = -8;
int b = a >> 1;
\end{verbatim}

On x86\_64 and AArch64: sign-extend

% [TBD] token is used to represent images or non-textual elements that cannot be represented in LaTeX
[TBD]


% LaTeX transcription of the given lecture content

\subsection{Undefined Behavior}

Behavior, upon use of a nonportable or erroneous program construct or of erroneous data,
for which this document imposes no \textbf{requirements}.

\textbf{Possibly:}
\begin{itemize}
    \item ignoring the situation completely with unpredictable results,
    \item implementation-defined behavior
    \item compilation or execution yields error message
    \item compilation or execution crashes
    \item \textbf{anything else}
\end{itemize}

\textbf{Example}
\begin{verbatim}
int *a = NULL;
int b = *a;
\end{verbatim}

\subsection{Easy UB: division by zero}

``The result of the \texttt{/} operator is the quotient from the division of the first operand by the second;
the result of the \texttt{\%} operator is the remainder.

In both operations, if the value of the second operand is zero, the behavior is undefined.'' (p83)

\begin{verbatim}
int main(int argc)
{
    return 5 / (argc - 1);
}
\end{verbatim}

\begin{verbatim}
./main
Floating point exception (core dumped)
\end{verbatim}

% The LaTeX transcription presented above should be cleanly compiled in any LaTeX editor.
% Images and non-textual content are denoted by [TBD] inline with the text.
% Direct text content is accurately transcribed, with formatting represented by LaTeX commands.
\subsection{Easy UB? (division by zero)}

\begin{verbatim}
#include <stdio.h>

int main()
{
    printf("%d\n", 5 / 0);
    return 0;
}
\end{verbatim}

\begin{verbatim}
clang -O3 -std=c2x -o main main.c
main.c:3:11: warning: division by zero is undefined [-Wdivision-by-zero]
    return 5 / 0;
          ^
\end{verbatim}

% The following parts contain output from running the program which are replaced by the [TBD] token
% since it cannot be represented in LaTeX.

\begin{verbatim}
./main
[TBD] % Replace with actual output, which is undefined behavior and machine-specific
\end{verbatim}

\begin{verbatim}
./main
[TBD] % Replace with actual output, which is undefined behavior and machine-specific
\end{verbatim}

\begin{verbatim}
./main
[TBD] % Replace with actual output, which is undefined behavior and machine-specific
\end{verbatim}

\begin{verbatim}
./main
[TBD] % Replace with actual output, which is undefined behavior and machine-specific
\end{verbatim}

\begin{verbatim}
0000000000401130 <main>:
401130:   50                       push   rax
401131:   bf 10 20 40 00           mov    edi,0x402010
401136:   b1 c0                    xor    eax,eax
401138:   e8 f3 fe ff ff           call   401030 <printf@plt>
40113d:   59                       pop    rcx
40113e:   31 c0                    xor    eax,eax
401140:   c3                       ret
\end{verbatim}

\subsection{Easy UB: division overflow}

\begin{quote}
âWhen integers are divided, the result of the / operator is the algebraic quotient
with any fractional part discarded (``truncation toward zero'').

If the quotient \( a / b \) is representable, the expression \( (a / b) * b + a \% b \) shall equal \( a \);
otherwise, the behavior of both \( a / b \) and \( a \% b \) is undefined.â (p83)
\end{quote}



% The LaTeX code provided below represents the textual content of the lecture material in the image.
% Content within the [TBD] tokens cannot be transcribed into LaTeX 
% because they are non-textual elements (such as actual output, diagrams, etc.)

% Code from the first image section
\begin{verbatim}
#include <stdio.h>
#include <limits.h>

void print_if_negative(int a)
{
    if (a >= 0)
        return;
    
    printf("a = %d\n", a);
    printf("a / -1 = %d\n", a / -1);
}

int main()
{
    print_if_negative(-5);

    return 0;
}

a = -5
a / -1 = 5
\end{verbatim}

% Text reminder below the code
Reminder: int can represent $\{-2147483648, \ldots, 2147483647\}$.

% Code from the second image section
\begin{verbatim}
#include <stdio.h>
#include <limits.h>

void print_if_negative(int a)
{
    if (a >= 0)
        return;
    
    printf("a = %d\n", a);
    printf("a / -1 = %d\n", a / -1);
    
    if (a / -1 > 0)
        printf("a / -1 = %d is positive\n", a / -1);
}

int main()
{
    print_if_negative(INT_MIN);

    return 0;
}

a = -2147483648
a / -1 = -2147483648
a / -1 = -2147483648 is positive
\end{verbatim}

% Any non-textual elements such as compiler output or diagrams have been replaced with [TBD].
% Please note that the output displayed in the image has been transcribed as comments for completeness,
% but in an actual LaTeX document, it would not be displayed as a verbatim section.

\subsection{Integer overflow}

\begin{verbatim}
#include <stdio.h>
#include <stdint.h>

int main() {
    uint8_t a = 0;

    for (int i = 0; i < 1000; i++) {
        printf("%d\\n", a);
        a = a + 1;
    }

    return 0;
}
\end{verbatim}

Note: 1000 $>$ $2^8$ = 256.

% The following is a binary representation, which is non-textual and is thus replaced by [TBD]
[TBD]

\subsection{Unsigned integer overflow}

\begin{itemize}
    \item Unsigned overflow is not undefined behavior
    \item Unsigned overflow has wrap-around behavior:
    \begin{itemize}
        \item If $i, j$ are $n$-bit unsigned integers
        \begin{itemize}
            \item then $i + j$ yields $(i + j) \mod 2^n$
        \end{itemize}
        \item for any operation on unsigned $n$-bit integers,
        \begin{itemize}
            \item the result is the bottom $n$ bits of the true arithmetic value
        \end{itemize}
    \end{itemize}
    \item x86\_64 and AArch64 instruction work in this same way
\end{itemize}

\subsection{Signed integer overflow}

\begin{itemize}
    \item x86\_64 and AArch64 instruction have wrap-around behavior
    \item But in C, signed overflow is undefined behavior!!!
\end{itemize}



% Document content starts here

\subsection{Signed integer overflow}

\begin{verbatim}
#include <stdio.h>
#include <limits.h>

void print_if_positive(int a)
{
    if (a <= 0)
        return;
    printf("a = %d\n", a);
    printf("a + 1 = %d\n", a + 1);
    if (a + 1 > 0)
        printf("a + 1 = %d is positive\n", a + 1);
}

int main()
{
    print_if_positive(INT_MAX);
    return 0;
}
\end{verbatim}

% Output of the code block
a = 2147483647 \\
a + 1 = -2147483648 \\
a + 1 = -2147483648 is positive

\subsection{Easy UB: invalid pointers}

\textit{"If an invalid value has been assigned to the pointer, the behavior of the unary * operator is undefined." (p81)}

\begin{verbatim}
int int_at(int *pointer)
{
    int r = *pointer;
    return r;
}

int main()
{
    printf("%d", int_at((int *)11));
    return 0;
}
\end{verbatim}

% The code results in undefined behavior, specifically a segmentation fault
./main \\
Segmentation fault (core dumped)

\subsection{Easy UB!?? (invalid pointers)}

\begin{verbatim}
int int_at(int *pointer)
{
    int r = *pointer;
    if (pointer == NULL)
        return 0;
    return r;
}
\end{verbatim}

% This part appears to be the assembly code output for the int_at function
% which cannot be directly represented in verbatim text as it is not part of the C code.
[TBD]